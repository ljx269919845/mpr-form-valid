{"version":3,"sources":["ng://mpr-form-valid/lib/services/global-valid-msg.service.ts","ng://mpr-form-valid/lib/services/form-valid-msg.service.ts","ng://mpr-form-valid/lib/services/global-valid.service.ts","ng://mpr-form-valid/lib/form-control-valid/form-control-valid.component.ts","ng://mpr-form-valid/lib/directives/form-valid-msg.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-validtor.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-part-valid.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-header-valid.directive.ts","ng://mpr-form-valid/lib/validtors/float-only-validtor.directive.ts","ng://mpr-form-valid/lib/directives/form-group.directive.ts","ng://mpr-form-valid/lib/directives/form.directive.ts","ng://mpr-form-valid/lib/form-valid.module.ts"],"names":["GlobalValidMsgService","Map","prototype","registerMsg","msgKey","msgValue","Error","this","validMsg","set","toLowerCase","getMsg","get","globalValidMsgServ","FormValidMsgService","setValidMsg","getValidMsg","msgPath","error","tmpMsg","tmpWeight","minWeight","Number","MAX_VALUE","errorMsg","name_1","isNaN","resetMsg","msg","name_2","formatMsg","path","result","name_3","Injectable","GlobalValidService","registerValidForm","form","errorHook","index","validForms","findIndex","elem","count","length","push","errorHooks","resetNull","forEach","elemForm","FormControl","reset","emitEvent","onlySelf","setErrors","markAsPristine","_this","resetGroup","unsubscribe","sub","valueChanges","subscribe","validAll","disabled","valid","markAsDirty","console","log","status","setValue","value","emitModelToViewChange","emitViewToModelChange","statusChanges","emit","validFormGroup","unregisterValidForm","fIndex","indexOf","splice","formGroup","formControls","controls","hasOwnProperty","FormGroup","VALID_COMPONENT_NAME","FormControlValidComponent","controlName","container","errMsgServ","globalValidServ","elemRef","replace","ngOnInit","ngAfterContentInit","Promise","resolve","then","bindControlErrorMsg","getFormControlName","control","formControl","getPath","root","pristine","errors","onlyGroup","getGroupControlValidMsg","ngOnDestroy","setFormControlMsgListener","errorInfo","tmpErrorInfo","getParentGroupELem","parentElement","nativeElement","getAttribute","nodeName","toLocaleLowerCase","getSlibingFormContrlElem","searchElem","previousSibling","previousElementSibling","hasAttribute","groupValidControlLength","querySelectorAll","FormGroupDirective","FormGroupName","NgModelGroup","name","siblingElem","ctrlName","tmpPath","join","Component","args","selector","template","styles","Attribute","ControlContainer","decorators","type","Optional","ElementRef","Input","ContentChild","TemplateRef","FormValidMsgDirective","msgServ","Object","defineProperty","Directive","providers","ISBN_VALIDTOR","provide","NG_VALIDATORS","useExisting","forwardRef","IsbnValidtorDirective","multi","validate","c","isbn","isbn1","isbn2","isbn3","isbn4","isbn5","validISBNCode","s","isBarCode","d","a","b","i","sc","parseInt","RegExp","exec","substring","ISBN_PART_VALIDTOR","IsbnPartValidDirective","isbnPart34","ISBN_HEADER_VALIDTOR","IsbnHeaderValidDirective","isbnHeader","FLOAT_VALIDTOR","FloatOnlyValidtorDirective","floatVal","parseFloat","float","MprFormGroupDirective","render","setAttribute","Renderer2","MprFormDirective","FormValidModule","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * å¨å±éªè¯æ¶æ¯ï¼ å­å¨é»è®¤æ¶æ¯\r\n */\r\nexport class GlobalValidMsgService {\r\n\tprivate validMsg = new Map<String, String>();\r\n\tconstructor() {}\r\n\r\n\t/**\r\n   * è®¾ç½®éè¯¯keyçé»è®¤æ¶æ¯\r\n   * @param msgKey éè¯¯key\r\n   * @param msgValue éè¯¯æ¶æ¯\r\n   */\r\n\tpublic registerMsg(msgKey: string, msgValue: string) {\r\n\t\tif (!msgKey || !msgValue) {\r\n\t\t\tthrow new Error('msg key and value must not empty');\r\n\t\t}\r\n\t\tthis.validMsg.set(msgKey.toLowerCase(), msgValue);\r\n\t}\r\n\r\n\tpublic getMsg(msgKey: string) {\r\n\t\tif (!msgKey) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.validMsg.get(msgKey.toLowerCase());\r\n\t}\r\n}\r\n\r\nexport const globalValidMsgServ = new GlobalValidMsgService();\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { globalValidMsgServ } from './global-valid-msg.service';\r\n\r\n@Injectable()\r\nexport class FormValidMsgService {\r\n\r\n  private validMsg = {};\r\n  constructor() { }\r\n\r\n  public setValidMsg(msgKey: string, msgValue: string) {\r\n    if (!msgValue) {\r\n      return;\r\n    }\r\n    this.validMsg[msgKey.toLowerCase()] = msgValue;\r\n  }\r\n\r\n  public getValidMsg(msgPath: string, error) {\r\n    let minWeight = Number.MAX_VALUE;\r\n    let errorMsg = '';\r\n    let tmpMsg;\r\n    let tmpWeight;\r\n    msgPath = (msgPath || '').toLowerCase();\r\n    if (!error || !msgPath) {\r\n      return {errorMsg, minWeight};\r\n    }\r\n\r\n    for (let name in error) {\r\n      name = name.toLowerCase();\r\n      tmpMsg = this.validMsg[msgPath + '.' + name] || globalValidMsgServ.getMsg(name);\r\n      if(!tmpMsg){\r\n        continue;\r\n      }\r\n      if(Number.isNaN(Number(error[name]))){\r\n        tmpWeight = 1000;\r\n      }else{\r\n        tmpWeight = Number(error[name]);\r\n      }\r\n      if(tmpWeight < minWeight){\r\n        minWeight = tmpWeight;\r\n        errorMsg = tmpMsg;\r\n      }\r\n    }\r\n    return {errorMsg, minWeight};\r\n  }\r\n\r\n  public resetMsg(msg: Object) {\r\n    if (typeof msg !== 'object') {\r\n      throw Error('form valid msg must be a object');\r\n    }\r\n    //this.validMsg = {};\r\n\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        this.validMsg[name.toLowerCase()] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], name.toLowerCase(), this.validMsg);\r\n      }\r\n    }\r\n  }\r\n\r\n  private formatMsg(msg: Object, path: string, result: Object) {\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        result[path + '.' + name.toLowerCase()] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], path + '.' + name.toLowerCase(), result);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class GlobalValidService {\r\n  private validForms: Array<any> = [];\r\n\r\n  constructor() {}\r\n\r\n  public registerValidForm(form: AbstractControl, errorHook: Function) {\r\n    let index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0) {\r\n      this.validForms[index].count += 1;\r\n    } else {\r\n      index = this.validForms.length;\r\n      this.validForms.push({ form: form, count: 1, errorHooks: [] });\r\n    }\r\n    if (errorHook) {\r\n      this.validForms[index].errorHooks.push(errorHook);\r\n    }\r\n  }\r\n\r\n  public resetNull() {\r\n    this.validForms.forEach((elemForm) => {\r\n      if (elemForm.form instanceof FormControl) {\r\n        elemForm.form.reset(null, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: true });\r\n        elemForm.form.markAsPristine();\r\n      } else {\r\n        elemForm.form.reset({}, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: false });\r\n        this.resetGroup(elemForm.form);\r\n      }\r\n      if (elemForm['sub']) {\r\n        elemForm['sub'].unsubscribe();\r\n      }\r\n      elemForm.form['_reset'] = true;\r\n      const sub = elemForm.form.valueChanges.subscribe(() => {\r\n        elemForm.form['_reset'] = false;\r\n        elemForm['sub'].unsubscribe();\r\n        elemForm['sub'] = null;\r\n      });\r\n      elemForm['sub'] = sub;\r\n    });\r\n  }\r\n\r\n  public validAll() {\r\n    let result = true;\r\n    this.validForms.forEach((elemForm) => {\r\n      if (elemForm.form.disabled) {\r\n        return;\r\n      }\r\n      if (!elemForm.form.valid || elemForm.form['_reset']) {\r\n        //  if (elemForm.form['_reset']) {\r\n        //   elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n        //  }\r\n        //  elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n        elemForm.form.markAsDirty();\r\n        if (elemForm.form instanceof FormControl) {\r\n          console.log(elemForm.form.status, elemForm.form);\r\n          if (elemForm.form['_reset']) {\r\n            elemForm.form['_reset'] = false;\r\n            elemForm.form.setValue(elemForm.form.value, {\r\n              emitModelToViewChange: false,\r\n              emitViewToModelChange: false,\r\n              onlySelf: true,\r\n              emitEvent: false\r\n            });\r\n          }\r\n          elemForm.form.statusChanges.emit(elemForm.form.status);\r\n        } else {\r\n          this.validFormGroup(elemForm.form);\r\n        }\r\n        if (!elemForm.form.valid) {\r\n          elemForm.errorHooks.forEach((errorHook) => {\r\n            errorHook(elemForm.form);\r\n          });\r\n        }\r\n      }\r\n      result = elemForm.form.valid && result;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public unregisterValidForm(form, errorHook: Function) {\r\n    const index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0 && this.validForms[index].count > 1) {\r\n      this.validForms[index].count -= 1;\r\n      if (errorHook) {\r\n        const fIndex = this.validForms[index].errorHooks.indexOf(errorHook);\r\n        if (fIndex != -1) {\r\n          this.validForms[index].errorHooks.splice(fIndex, 1);\r\n        }\r\n      }\r\n    } else {\r\n      this.validForms.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private validFormGroup(formGroup: FormGroup) {\r\n    if (formGroup.disabled) {\r\n      return;\r\n    }\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name].disabled) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        this.validFormGroup(<FormGroup>formControls[name]);\r\n      }\r\n      if (!formControls[name].valid || formControls[name]['_reset']) {\r\n        formControls[name].markAsDirty();\r\n        console.log(formControls[name].status, formControls[name]);\r\n        if (formControls[name]['_reset']) {\r\n          formControls[name]['_reset'] = false;\r\n          formControls[name].setValue(formControls[name].value, {\r\n            emitModelToViewChange: false,\r\n            emitViewToModelChange: false,\r\n            onlySelf: true,\r\n            emitEvent: false\r\n          });\r\n        }\r\n        (formControls[name].statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n      }\r\n      if (!formGroup.valid || formGroup['_reset']) {\r\n        formGroup.markAsDirty();\r\n        if (formGroup['_reset']) {\r\n          formGroup['_reset'] = false;\r\n          formGroup.setValue(formGroup.value, { onlySelf: true, emitEvent: false });\r\n        }\r\n        (formGroup.statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n      }\r\n    }\r\n  }\r\n\r\n  private resetGroup(formGroup: FormGroup) {\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        formControls[name].setErrors(null, { emitEvent: false });\r\n        this.resetGroup(<FormGroup>formControls[name]);\r\n      } else {\r\n        formControls[name].setErrors(null, { emitEvent: true });\r\n      }\r\n      formControls[name]['_reset'] = true;\r\n      formControls[name].markAsPristine();\r\n    }\r\n  }\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tContentChild,\r\n\tTemplateRef,\r\n\tInput,\r\n\tInject,\r\n\tAfterContentInit,\r\n\tElementRef,\r\n\tAttribute,\r\n\tOptional\r\n} from '@angular/core';\r\nimport {\r\n\tControlContainer,\r\n\tAbstractControl,\r\n\tAbstractControlDirective,\r\n\tFormControl,\r\n\tFormGroup,\r\n\tFormGroupName,\r\n\tFormGroupDirective,\r\n\tNgModelGroup\r\n} from '@angular/forms';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\nimport { GlobalValidService } from '../services/global-valid.service';\r\n\r\nconst VALID_COMPONENT_NAME = 'mpr-form-control-valid';\r\n\r\n@Component({\r\n\tselector: VALID_COMPONENT_NAME,\r\n\ttemplate: `<span\r\n    class=\"error\"\r\n    [ngClass]=\"errorPrompt\"\r\n    [hidden]=\"!errorMsg\"\r\n>\r\n    <ng-container\r\n        [ngTemplateOutlet]=\"template\"\r\n        [ngTemplateOutletContext]=\"{errorMsg:errorMsg}\"\r\n    ></ng-container>\r\n    <p *ngIf=\"!template\">{{errorMsg}}</p>\r\n</span>\r\n`,\r\n\tstyles: [`p{width:100%;height:17px;line-height:17px;color:#e06a2f;float:left}`]\r\n})\r\nexport class FormControlValidComponent implements OnInit, AfterContentInit {\r\n\t//åªæ¾ç¤ºformgroupæ¬èº«çéè¯¯ï¼ä¸æ¾ç¤ºgroupä¸controlçéè¯¯\r\n\t@Input() onlyGroup = false;\r\n\t@Input() errorPrompt;\r\n\t@Input() controlName;\r\n\t@Input() errorHook: Function;\r\n\r\n\t@ContentChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n\tpublic errorMsg: string; //éªè¯å¤±è´¥æ¾ç¤ºçéè¯¯æ¶æ¯\r\n\r\n\tprivate formControl: AbstractControl;\r\n\tprivate groupValidControlLength = 1;\r\n\r\n\tconstructor(\r\n\t\t@Attribute('controlName') controlName: string,\r\n\t\t@Optional() private container: ControlContainer,\r\n\t\tprivate errMsgServ: FormValidMsgService,\r\n\t\tprivate globalValidServ: GlobalValidService,\r\n\t\tprivate elemRef: ElementRef\r\n\t) {\r\n\t\tif (controlName) {\r\n\t\t\tthis.controlName = controlName.replace(/'/g, '');\r\n\t\t}\r\n\t}\r\n\r\n\tngOnInit() {}\r\n\r\n\tngAfterContentInit() {\r\n\t\t//  å¼å®¹ngFrom\r\n\t\tPromise.resolve(null).then(() => {\r\n\t\t\tthis.bindControlErrorMsg();\r\n\t\t});\r\n\t}\r\n\r\n\tbindControlErrorMsg() {\r\n\t\tthis.controlName = this.getFormControlName();\r\n\t\tif (!this.controlName) {\r\n\t\t\tthrow new Error(\"can't find controlName\");\r\n\t\t}\r\n\t\tconsole.log(this.controlName);\r\n\t\tlet path = '';\r\n\t\tconst isFormControl =\r\n\t\t\tthis.container.control.get(this.controlName) &&\r\n\t\t\tthis.container.control.get(this.controlName) instanceof FormControl;\r\n\t\tif (!isFormControl) {\r\n\t\t\t// from root or from formGroupName\r\n\t\t\tthis.formControl = this.container.control;\r\n\t\t\tpath = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n\t\t\tthis.formControl.statusChanges.subscribe(() => {\r\n\t\t\t\tif (this.formControl.pristine) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.onlyGroup) {\r\n\t\t\t\t\tthis.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)[\r\n\t\t\t\t\t\t'errorMsg'\r\n\t\t\t\t\t];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.errorMsg = this.getGroupControlValidMsg(<any>this.formControl, path || this.controlName, {\r\n\t\t\t\t\t\tminWeight: Number.MAX_VALUE,\r\n\t\t\t\t\t\terrorMsg: ''\r\n\t\t\t\t\t})['errorMsg'];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.formControl = this.container.control.get(this.controlName);\r\n\t\t\tpath = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n\t\t\tthis.formControl.statusChanges.subscribe(() => {\r\n\t\t\t\tif (this.formControl.pristine) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)[\r\n\t\t\t\t\t'errorMsg'\r\n\t\t\t\t];\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!this.formControl) {\r\n\t\t\tthrow new Error('formControl instance not find');\r\n\t\t}\r\n\t\tthis.globalValidServ.registerValidForm(this.formControl['root'] || this.formControl, this.errorHook);\r\n\t}\r\n\r\n\tngOnDestroy(): void {\r\n\t\t//Called once, before the instance is destroyed.\r\n\t\t//Add 'implements OnDestroy' to the class.\r\n\t\tif (this.formControl) {\r\n\t\t\tthis.globalValidServ.unregisterValidForm(this.formControl['root'] || this.formControl, this.errorHook);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setFormControlMsgListener(control: FormGroup | FormControl, path) {\r\n\t\tcontrol.valueChanges.subscribe(() => {\r\n\t\t\tlet errorInfo = this.errMsgServ.getValidMsg(path || this.controlName, control.errors);\r\n\t\t});\r\n\t\tif (control instanceof FormGroup) {\r\n\t\t\tfor (let name in control.controls) {\r\n\t\t\t\tthis.setFormControlMsgListener(<any>control.get(name), path + '.' + name);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n   * è·ågroupä¸é¢çææéªè¯éè¯¯æ¶æ¯\r\n   * @param control\r\n   * @param path\r\n   */\r\n\tprivate getGroupControlValidMsg(control: any, path: string, errorInfo) {\r\n\t\tif (control instanceof FormControl && !control.pristine) {\r\n\t\t\treturn this.errMsgServ.getValidMsg(path, control.errors);\r\n\t\t} else if (control instanceof FormControl && control.pristine) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tlet tmpErrorInfo;\r\n\t\tfor (let name in control.controls) {\r\n\t\t\ttmpErrorInfo = this.getGroupControlValidMsg(<any>control.get(name), path + '.' + name, errorInfo);\r\n\t\t\tif (tmpErrorInfo && tmpErrorInfo['minWeight'] < errorInfo['minWeight']) {\r\n\t\t\t\terrorInfo = tmpErrorInfo;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!control.pristine) {\r\n\t\t\ttmpErrorInfo = this.errMsgServ.getValidMsg(path, control.errors);\r\n\t\t}\r\n\t\tif (tmpErrorInfo && tmpErrorInfo['minWeight'] < errorInfo['minWeight']) {\r\n\t\t\terrorInfo = tmpErrorInfo;\r\n\t\t}\r\n\t\treturn errorInfo;\r\n\t}\r\n\r\n\tprivate getParentGroupELem(): Element {\r\n\t\tlet parentElement: Element = this.elemRef.nativeElement.parentElement;\r\n\t\t// const arrtributeNames: Array<string> = parentElement.getAttributeNames();\r\n\t\t// console.log(parentElement.getAttribute('ng-reflect-form'));\r\n\t\twhile (\r\n\t\t\tparentElement &&\r\n\t\t\t!parentElement.getAttribute('formgroupname') &&\r\n\t\t\t!parentElement.getAttribute('formGroupName') &&\r\n\t\t\t!parentElement.getAttribute('formgroup')\r\n\t\t) {\r\n\t\t\tif (\r\n\t\t\t\tparentElement.nodeName.toLocaleLowerCase() === 'form' ||\r\n\t\t\t\tparentElement.nodeName.toLocaleLowerCase() === 'ngform'\r\n\t\t\t) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tparentElement = parentElement.parentElement;\r\n\t\t}\r\n\t\tif (!parentElement) {\r\n\t\t\tconsole.log(this.elemRef.nativeElement);\r\n\t\t\tthrow new Error('can not find parentElement');\r\n\t\t}\r\n\t\treturn parentElement;\r\n\t}\r\n\r\n\tprivate getSlibingFormContrlElem(searchElem: Element) {\r\n\t\tlet previousSibling: Element = searchElem.previousElementSibling;\r\n\t\twhile (\r\n\t\t\tpreviousSibling &&\r\n\t\t\t!previousSibling.hasAttribute('formcontrolname') &&\r\n\t\t\t!previousSibling.hasAttribute('formControlName') &&\r\n\t\t\t!previousSibling.hasAttribute('name')\r\n\t\t) {\r\n\t\t\t// if(previousSibling.hasAttribute(\"formGroupName\") || previousSibling.hasAttribute(\"[formGroup]\")){\r\n\t\t\t//   throw new Error(\"have search to root\");\r\n\t\t\t// }\r\n\t\t\tpreviousSibling = previousSibling.previousElementSibling;\r\n\t\t}\r\n\t\tif (!previousSibling) {\r\n\t\t\tthrow new Error('mpr-form-control-valid must have a formcontrol sibiling');\r\n\t\t}\r\n\t\treturn previousSibling;\r\n\t}\r\n\r\n\t/**\r\n   * èªå¨æ¥æ¾å½åéªè¯å¯¹åºçformControlNameæèformGroupName\r\n   */\r\n\tprivate getFormControlName(): string {\r\n\t\tif (this.controlName) {\r\n\t\t\t// æå¨è®¾å®äºcontrolName\r\n\t\t\treturn this.controlName;\r\n\t\t}\r\n\r\n\t\tlet controlName;\r\n\t\tif (!this.container) {\r\n\t\t\tthrow new Error('only one [formControl] not support, There must be a formGroupName or [formGroup]');\r\n\t\t} else {\r\n\t\t\tconst parentElement: Element = this.getParentGroupELem();\r\n\t\t\tconst groupValidControlLength = parentElement.querySelectorAll(VALID_COMPONENT_NAME).length;\r\n\t\t\tthis.groupValidControlLength = groupValidControlLength;\r\n\t\t\tif (this.container instanceof FormGroupDirective && groupValidControlLength <= 1) {\r\n\t\t\t\t// ç´æ¥æ¯æ ¹èç¹å¯¹åºæ´ä¸ªfrom [formGroup]=\"formGroup\"\r\n\t\t\t\t// æ´ä¸ªformè¡¨ååªæä¸ä¸ªmpr-form-control-validï¼åä»¥å½åformGroupå¯¹åºçåéåä¸ºcontrolName\r\n\t\t\t\tthrow new Error('you should set controlName by yourself');\r\n\t\t\t} else if (this.container instanceof FormGroupName && groupValidControlLength <= 1) {\r\n\t\t\t\t// ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n\t\t\t\t// æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n\t\t\t\t// ä¼ååfromGroupçéªè¯\r\n\t\t\t\tcontrolName =\r\n\t\t\t\t\tparentElement.getAttribute('formgroupname') || parentElement.getAttribute('fromGroupName');\r\n\t\t\t} else if (this.container instanceof NgModelGroup && groupValidControlLength <= 1) {\r\n\t\t\t\t// ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n\t\t\t\t// æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n\t\t\t\t// ä¼ååfromGroupçéªè¯\r\n\t\t\t\tcontrolName = this.container.name;\r\n\t\t\t} else {\r\n\t\t\t\t// mpr-form-control-valid å¯¹åºä¸ä¸ª formControlName\r\n\t\t\t\t// ååæ¥æ¾åå¼èç¹\r\n\t\t\t\tconst siblingElem = this.getSlibingFormContrlElem(this.elemRef.nativeElement);\r\n\t\t\t\tcontrolName =\r\n\t\t\t\t\tsiblingElem.getAttribute('formcontrolname') ||\r\n\t\t\t\t\tsiblingElem.getAttribute('formControlName') ||\r\n\t\t\t\t\tsiblingElem.getAttribute('name');\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if(this.controlName && this.controlName != controlName){\r\n\t\t//   throw new Error(`you may set a error controlName, you set is: ${this.controlName}, but need is: ${controlName}`);\r\n\t\t// }\r\n\t\treturn controlName;\r\n\t}\r\n\r\n\t/**\r\n   * è·åå½åformControlç¸å¯¹äºformGroupçpath\r\n   * @param formControl\r\n   * @param root\r\n   * @param controlName\r\n   */\r\n\tprivate getPath(formControl: AbstractControl, root, controlName) {\r\n\t\tif (!(root instanceof FormGroup)) {\r\n\t\t\tif (formControl === root) {\r\n\t\t\t\treturn controlName;\r\n\t\t\t}\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tconst path = [];\r\n\t\tfor (const ctrlName in root['controls']) {\r\n\t\t\tif (root['controls'][ctrlName] === formControl) {\r\n\t\t\t\treturn ctrlName;\r\n\t\t\t}\r\n\t\t\tif (root['controls'][ctrlName] instanceof FormGroup) {\r\n\t\t\t\tconst tmpPath = this.getPath(formControl, root['controls'][ctrlName], controlName);\r\n\t\t\t\tif (tmpPath) {\r\n\t\t\t\t\tpath.push(ctrlName);\r\n\t\t\t\t\tpath.push(tmpPath);\r\n\t\t\t\t\treturn path.join('.');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn path.join('.');\r\n\t}\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\n\r\n@Directive({\r\n  selector: '[isliFormValidMsg]',\r\n  providers: [FormValidMsgService]\r\n})\r\nexport class FormValidMsgDirective {\r\n\r\n  @Input('isliFormValidMsg') set validMsg(msg) {\r\n    if (msg) {\r\n      this.msgServ.resetMsg(msg);\r\n    }\r\n  }\r\n\r\n  constructor(private msgServ: FormValidMsgService) {\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nexport interface ISBN {\r\n  isbn1: string;\r\n  isbn2: string;\r\n  isbn3: string;\r\n  isbn4: string;\r\n  isbn5: string;\r\n}\r\n\r\nconst ISBN_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnValid]',\r\n  providers: [ISBN_VALIDTOR]\r\n})\r\nexport class IsbnValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbn', 'è¯·è¾å¥æ­£ç¡®çISBNå·');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    // ä¸éªè¯éç©º\r\n    if (!isbn.isbn1 || !isbn.isbn2 || !isbn.isbn3 || !isbn.isbn4 || !isbn.isbn5) {\r\n      return null;\r\n    }\r\n\r\n    if (this.validISBNCode([isbn.isbn1, isbn.isbn2, isbn.isbn3, isbn.isbn4, isbn.isbn5].join(''))) {\r\n      return { isbn: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validISBNCode(s) {\r\n    if (s === '9999999999999') {\r\n      return true;\r\n    }\r\n    if (!this.isBarCode(s)) {\r\n      return false;\r\n    }\r\n    let a = 0, b = 0, c = 0, d = 0, e;\r\n    for (let i = 1; i <= 12; i++) {\r\n      const sc = parseInt(s[i - 1], 10);\r\n      if (i <= 12 && i % 2 === 0) {\r\n        a += sc;\r\n      } else if (i <= 11 && i % 2 === 1) {\r\n        b += sc;\r\n      }\r\n    }\r\n    c = a * 3;\r\n    d = b + c;\r\n    if (d % 10 === 0) {\r\n      e = d - d;\r\n    } else {\r\n      e = d + (10 - d % 10) - d;\r\n    }\r\n    return e === parseInt(s[12], 10);\r\n  }\r\n\r\n  private isBarCode(s): boolean {\r\n    if (s.length !== 13) {\r\n      return false;\r\n    }\r\n    const reg = new RegExp(/^[0-9]{12}$/);\r\n    return reg.exec(s.substring(0, 12)) != null;\r\n  }\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { ISBN } from './isbn-validtor.directive';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_PART_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnPartValidDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnPartValid]',\r\n  providers: [ISBN_PART_VALIDTOR]\r\n})\r\nexport class IsbnPartValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnPart34', 'ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    if (!isbn.isbn3 || !isbn.isbn4) {\r\n      return null;\r\n    }\r\n    // éªè¯ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­\r\n    if (isbn.isbn3.length + isbn.isbn4.length !== 8) {\r\n      return { isbnPart34: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_HEADER_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => IsbnHeaderValidDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnHeaderValid]',\r\n  providers: [ISBN_HEADER_VALIDTOR]\r\n})\r\nexport class IsbnHeaderValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnHeader', 'ç¬¬ä¸ç»å¿é¡»ä¸º978æ979');\r\n  }\r\n\r\n  validate(c: AbstractControl) {\r\n    if (!c.value) {\r\n      return null;\r\n    }\r\n    if (['999', '978', '979', '000'].indexOf(c.value) < 0) {\r\n      return { isbnHeader: true};\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst FLOAT_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => FloatOnlyValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprFloatOnlyValidtor]',\r\n  providers: [FLOAT_VALIDTOR]\r\n})\r\nexport class FloatOnlyValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('float', 'è¯·è¾å¥æµ®ç¹æ°');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    const floatVal = parseFloat('' + c.value);\r\n    if (isNaN(floatVal)) {\r\n      return { float: true };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[formGroup]'\r\n})\r\nexport class MprFormGroupDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'form,ngForm,[ngForm]'\r\n})\r\nexport class MprFormDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { FormControlValidComponent } from './form-control-valid/form-control-valid.component';\r\nimport { FormValidMsgDirective } from './directives/form-valid-msg.directive';\r\nimport { GlobalValidService } from './services/global-valid.service';\r\nimport { FormValidMsgService } from './services/form-valid-msg.service';\r\nimport { IsbnValidtorDirective } from './validtors/isbn-validtor.directive';\r\nimport { IsbnPartValidDirective } from './validtors/isbn-part-valid.directive';\r\nimport { IsbnHeaderValidDirective } from './validtors/isbn-header-valid.directive';\r\nimport { FloatOnlyValidtorDirective } from './validtors/float-only-validtor.directive';\r\nimport { MprFormGroupDirective } from './directives/form-group.directive';\r\nimport { MprFormDirective } from './directives/form.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective,\r\n    MprFormDirective\r\n  ],\r\n  exports: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective,\r\n    MprFormDirective\r\n  ],\r\n  providers: [\r\n    GlobalValidService,\r\n    FormValidMsgService\r\n  ]\r\n})\r\nexport class FormValidModule { }\r\n"]}