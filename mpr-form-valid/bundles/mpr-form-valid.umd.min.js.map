{"version":3,"sources":["ng://mpr-form-valid/lib/services/global-valid-msg.service.ts","ng://mpr-form-valid/lib/services/form-valid-msg.service.ts","ng://mpr-form-valid/lib/services/global-valid.service.ts","ng://mpr-form-valid/lib/form-control-valid/form-control-valid.component.ts","ng://mpr-form-valid/lib/directives/form-valid-msg.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-validtor.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-part-valid.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-header-valid.directive.ts","ng://mpr-form-valid/lib/validtors/float-only-validtor.directive.ts","ng://mpr-form-valid/lib/directives/form-group.directive.ts","ng://mpr-form-valid/lib/form-valid.module.ts"],"names":["GlobalValidMsgService","Map","prototype","registerMsg","msgKey","msgValue","Error","this","validMsg","set","getMsg","get","globalValidMsgServ","FormValidMsgService","setValidMsg","getValidMsg","msgPath","error","tmpMsg","tmpWeight","minWeight","Number","MAX_VALUE","errorMsg","name_1","isNaN","resetMsg","msg","name_2","formatMsg","path","result","name_3","Injectable","GlobalValidService","registerValidForm","form","index","validForms","findIndex","elem","count","push","resetNull","forEach","elemForm","FormControl","reset","emitEvent","onlySelf","setErrors","_this","resetGroup","unsubscribe","sub","valueChanges","subscribe","validAll","valid","console","log","status","statusChanges","emit","setValue","value","emitModelToViewChange","emitViewToModelChange","validFormGroup","unregisterValidForm","splice","formGroup","formControls","controls","hasOwnProperty","FormGroup","VALID_COMPONENT_NAME","FormControlValidComponent","controlName","container","errMsgServ","globalValidServ","elemRef","replace","ngOnInit","ngAfterContentInit","Promise","resolve","then","bindControlErrorMsg","getFormControlName","control","formControl","getPath","root","errors","onlyGroup","getGroupControlValidMsg","ngOnDestroy","setFormControlMsgListener","errorInfo","tmpErrorInfo","getParentGroupELem","parentElement","nativeElement","getAttribute","nodeName","toLocaleLowerCase","getSlibingFormContrlElem","searchElem","previousSibling","previousElementSibling","hasAttribute","groupValidControlLength","querySelectorAll","length","FormGroupDirective","FormGroupName","NgModelGroup","name","siblingElem","ctrlName","tmpPath","join","Component","args","selector","template","styles","Attribute","ControlContainer","decorators","type","Optional","ElementRef","Input","ContentChild","TemplateRef","FormValidMsgDirective","msgServ","Object","defineProperty","Directive","providers","ISBN_VALIDTOR","provide","NG_VALIDATORS","useExisting","forwardRef","IsbnValidtorDirective","multi","validate","c","isbn","isbn1","isbn2","isbn3","isbn4","isbn5","validISBNCode","s","isBarCode","d","a","b","i","sc","parseInt","RegExp","exec","substring","ISBN_PART_VALIDTOR","IsbnPartValidDirective","isbnPart34","ISBN_HEADER_VALIDTOR","IsbnHeaderValidDirective","indexOf","isbnHeader","FLOAT_VALIDTOR","FloatOnlyValidtorDirective","floatVal","parseFloat","float","MprFormGroupDirective","render","setAttribute","Renderer2","FormValidModule","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * å¨å±éªè¯æ¶æ¯ï¼ å­å¨é»è®¤æ¶æ¯\r\n */\r\nexport class GlobalValidMsgService {\r\n\r\n  private validMsg = new Map<String, String>();\r\n  constructor() { }\r\n\r\n  /**\r\n   * è®¾ç½®éè¯¯keyçé»è®¤æ¶æ¯\r\n   * @param msgKey éè¯¯key\r\n   * @param msgValue éè¯¯æ¶æ¯\r\n   */\r\n  public registerMsg(msgKey: string, msgValue: string) {\r\n    if (!msgKey || !msgValue) {\r\n      throw new Error('msg key and value must not empty');\r\n    }\r\n    this.validMsg.set(msgKey, msgValue);\r\n  }\r\n\r\n  public getMsg(msgKey: string) {\r\n    if (!msgKey) {\r\n      return null;\r\n    }\r\n    return this.validMsg.get(msgKey);\r\n  }\r\n}\r\n\r\n\r\nexport const globalValidMsgServ = new GlobalValidMsgService();\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { globalValidMsgServ } from './global-valid-msg.service';\r\n\r\n@Injectable()\r\nexport class FormValidMsgService {\r\n\r\n  private validMsg = {};\r\n  constructor() { }\r\n\r\n  public setValidMsg(msgKey: string, msgValue: string) {\r\n    if (!msgValue) {\r\n      return;\r\n    }\r\n    this.validMsg[msgKey] = msgValue;\r\n  }\r\n\r\n  public getValidMsg(msgPath: string, error) {\r\n    let minWeight = Number.MAX_VALUE;\r\n    let errorMsg = '';\r\n    let tmpMsg;\r\n    let tmpWeight;\r\n\r\n    if (!error || !msgPath) {\r\n      return {errorMsg, minWeight};\r\n    }\r\n    \r\n    for (const name in error) {\r\n      tmpMsg = this.validMsg[msgPath + '.' + name] || globalValidMsgServ.getMsg(name);\r\n      if(!tmpMsg){\r\n        continue;\r\n      }\r\n      if(Number.isNaN(Number(error[name]))){\r\n        tmpWeight = 1000;\r\n      }else{\r\n        tmpWeight = Number(error[name]);\r\n      }\r\n      if(tmpWeight < minWeight){\r\n        minWeight = tmpWeight;\r\n        errorMsg = tmpMsg;\r\n      }\r\n    }\r\n    return {errorMsg, minWeight};\r\n  }\r\n\r\n  public resetMsg(msg: Object) {\r\n    if (typeof msg !== 'object') {\r\n      throw Error('form valid msg must be a object');\r\n    }\r\n    //this.validMsg = {};\r\n\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        this.validMsg[name] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], name, this.validMsg);\r\n      }\r\n    }\r\n  }\r\n\r\n  private formatMsg(msg: Object, path: string, result: Object) {\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        result[path + '.' + name] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], path + '.' + name, result);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class GlobalValidService {\r\n  private validForms: Array<any> = [];\r\n\r\n  constructor() { }\r\n\r\n  public registerValidForm(form: AbstractControl) {\r\n    const index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0) {\r\n      this.validForms[index].count += 1;\r\n    } else {\r\n      this.validForms.push({ form: form, count: 1 });\r\n    }\r\n  }\r\n\r\n  public resetNull() {\r\n    this.validForms.forEach((elemForm) => {\r\n      if (elemForm.form instanceof FormControl) {\r\n        elemForm.form.reset(null, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: true });\r\n      } else {\r\n        elemForm.form.reset({}, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: false });\r\n        this.resetGroup(elemForm.form);\r\n      }\r\n      if(elemForm['sub']){\r\n        elemForm['sub'].unsubscribe();\r\n      }\r\n      elemForm.form['_reset'] = true;\r\n      const sub = elemForm.form.valueChanges.subscribe(()=>{\r\n        elemForm.form['_reset'] = false;\r\n        elemForm['sub'].unsubscribe();\r\n        elemForm['sub'] = null;\r\n      });\r\n      elemForm['sub'] = sub;\r\n    });\r\n  }\r\n\r\n  public validAll() {\r\n    let result = true;\r\n    this.validForms.forEach((elemForm) => {\r\n      if (!elemForm.form.valid || elemForm.form['_reset']) {\r\n      //  if (elemForm.form['_reset']) {\r\n       //   elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n      //  }\r\n        elemForm.form['_reset'] = false;\r\n        //  elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n        if (elemForm.form instanceof FormControl) {\r\n          console.log(elemForm.form.status, elemForm.form);\r\n          elemForm.form.statusChanges.emit(elemForm.form.status);\r\n          elemForm.form.setValue(elemForm.form.value,\r\n            { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true, emitEvent: false });\r\n        } else {\r\n          this.validFormGroup(elemForm.form);\r\n        }\r\n      }\r\n      result = elemForm.form.valid && result;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public unregisterValidForm(form) {\r\n    const index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0 && this.validForms[index].count > 1) {\r\n      this.validForms[index].count -= 1;\r\n    } else {\r\n      this.validForms.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private validFormGroup(formGroup: FormGroup) {\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        this.validFormGroup(<FormGroup>formControls[name]);\r\n      }\r\n      if (!formControls[name].valid || formControls[name]['_reset']) {\r\n        formControls[name]['_reset'] = false;\r\n        console.log(formControls[name].status, formControls[name]);\r\n        (formControls[name].statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n        formControls[name].setValue(formControls[name].value,\r\n          { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true, emitEvent: false });\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private resetGroup(formGroup: FormGroup) {\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        formControls[name].setErrors(null, { emitEvent: false });\r\n        this.resetGroup(<FormGroup>formControls[name]);\r\n      } else {\r\n        formControls[name].setErrors(null, { emitEvent: true });\r\n      }\r\n      formControls[name]['_reset'] = true;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component, OnInit, ContentChild, TemplateRef, Input, Inject,\r\n  AfterContentInit, ElementRef, Attribute, Optional\r\n} from '@angular/core';\r\nimport {\r\n  ControlContainer, AbstractControl, AbstractControlDirective,\r\n  FormControl, FormGroup, FormGroupName, FormGroupDirective, NgModelGroup\r\n} from '@angular/forms';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\nimport { GlobalValidService } from '../services/global-valid.service';\r\n\r\nconst VALID_COMPONENT_NAME = 'mpr-form-control-valid';\r\n\r\n@Component({\r\n  selector: VALID_COMPONENT_NAME,\r\n  template: `<span\r\n    class=\"error\"\r\n    [ngClass]=\"errorPrompt\"\r\n    [hidden]=\"!errorMsg\"\r\n>\r\n    <ng-container\r\n        [ngTemplateOutlet]=\"template\"\r\n        [ngTemplateOutletContext]=\"{errorMsg:errorMsg}\"\r\n    ></ng-container>\r\n    <p *ngIf=\"!template\">{{errorMsg}}</p>\r\n</span>\r\n`,\r\n  styles: [`p{width:100%;height:17px;line-height:17px;color:#e06a2f;float:left}`]\r\n})\r\nexport class FormControlValidComponent implements OnInit, AfterContentInit {\r\n\r\n  //åªæ¾ç¤ºformgroupæ¬èº«çéè¯¯ï¼ä¸æ¾ç¤ºgroupä¸controlçéè¯¯\r\n  @Input() onlyGroup = false;\r\n  @Input() errorPrompt;\r\n  @Input() controlName;\r\n\r\n  @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  public errorMsg: string; //éªè¯å¤±è´¥æ¾ç¤ºçéè¯¯æ¶æ¯\r\n\r\n  private formControl: AbstractControl;\r\n  private groupValidControlLength = 1;\r\n\r\n  constructor(\r\n    @Attribute('controlName') controlName: string,\r\n    @Optional() private container: ControlContainer,\r\n    private errMsgServ: FormValidMsgService,\r\n    private globalValidServ: GlobalValidService,\r\n    private elemRef: ElementRef) {\r\n    if (controlName) {\r\n      this.controlName = controlName.replace(/'/g, '');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    //  å¼å®¹ngFrom\r\n    Promise.resolve(null).then(() => {\r\n      this.bindControlErrorMsg();\r\n    });\r\n  }\r\n\r\n  bindControlErrorMsg() {\r\n    this.controlName = this.getFormControlName();\r\n    if (!this.controlName) {\r\n      throw new Error(\"can't find controlName\");\r\n    }\r\n    console.log(this.controlName);\r\n    let path = '';\r\n    const isFormControl = this.container.control.get(this.controlName)\r\n      && (this.container.control.get(this.controlName) instanceof FormControl);\r\n    if (!isFormControl) {\r\n      // from root or from formGroupName\r\n      this.formControl = this.container.control;\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.statusChanges.subscribe(() => {\r\n        if (this.onlyGroup) {\r\n          this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)['errorMsg'];\r\n        } else {\r\n          this.errorMsg = this.getGroupControlValidMsg(<any>this.formControl, path || this.controlName,\r\n            {minWeight: Number.MAX_VALUE, errorMsg: ''})['errorMsg'];\r\n        }\r\n      });\r\n    } else {\r\n      this.formControl = this.container.control.get(this.controlName);\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.statusChanges.subscribe(() => {\r\n        this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)['errorMsg'];\r\n      });\r\n    }\r\n    if (!this.formControl) {\r\n      throw new Error('formControl instance not find');\r\n    }\r\n    this.globalValidServ.registerValidForm(this.formControl['root'] || this.formControl);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //Called once, before the instance is destroyed.\r\n    //Add 'implements OnDestroy' to the class.\r\n    this.globalValidServ.unregisterValidForm(this.formControl['root'] || this.formControl);\r\n  }\r\n\r\n  private setFormControlMsgListener(control: FormGroup | FormControl, path){\r\n    control.valueChanges.subscribe(()=>{\r\n      let errorInfo = this.errMsgServ.getValidMsg(path || this.controlName, control.errors)\r\n    });\r\n    if(control instanceof FormGroup){\r\n      for (let name in control.controls){\r\n        this.setFormControlMsgListener(<any>control.get(name), path + '.' + name);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·ågroupä¸é¢çææéªè¯éè¯¯æ¶æ¯\r\n   * @param control\r\n   * @param path\r\n   */\r\n  private getGroupControlValidMsg(control: FormGroup | FormControl, path: string, errorInfo) {\r\n\r\n    if (control instanceof FormControl) {\r\n      return this.errMsgServ.getValidMsg(path, control.errors);\r\n    }\r\n    let tmpErrorInfo;\r\n    for (let name in control.controls) {\r\n      tmpErrorInfo = this.getGroupControlValidMsg(<any>control.get(name), path + '.' + name, errorInfo);\r\n      if(tmpErrorInfo['minWeight'] < errorInfo['minWeight']){\r\n        errorInfo = tmpErrorInfo;\r\n      }\r\n    }\r\n    tmpErrorInfo = this.errMsgServ.getValidMsg(path, control.errors);\r\n    if(tmpErrorInfo['minWeight'] < errorInfo['minWeight']){\r\n      errorInfo = tmpErrorInfo;\r\n    }\r\n    return errorInfo;\r\n  }\r\n\r\n  private getParentGroupELem(): Element {\r\n    let parentElement: Element = this.elemRef.nativeElement.parentElement;\r\n    // const arrtributeNames: Array<string> = parentElement.getAttributeNames();\r\n    // console.log(parentElement.getAttribute('ng-reflect-form'));\r\n    while (\r\n      parentElement &&\r\n      !parentElement.getAttribute('formgroupname')\r\n      && !parentElement.getAttribute('formGroupName')\r\n      && !parentElement.getAttribute('formgroup')) {\r\n      if(parentElement.nodeName.toLocaleLowerCase() === 'form' || parentElement.nodeName.toLocaleLowerCase() === 'ngform'){\r\n        break;\r\n      }\r\n      parentElement = parentElement.parentElement;\r\n    }\r\n    if (!parentElement) {\r\n      console.log(this.elemRef.nativeElement);\r\n      throw new Error(\"can not find parentElement\");\r\n    }\r\n    return parentElement;\r\n  }\r\n\r\n  private getSlibingFormContrlElem(searchElem: Element) {\r\n    let previousSibling: Element = searchElem.previousElementSibling;\r\n    while (previousSibling &&\r\n      !previousSibling.hasAttribute('formcontrolname') &&\r\n      !previousSibling.hasAttribute('formControlName') &&\r\n      !previousSibling.hasAttribute('name')) {\r\n      // if(previousSibling.hasAttribute(\"formGroupName\") || previousSibling.hasAttribute(\"[formGroup]\")){\r\n      //   throw new Error(\"have search to root\");\r\n      // }\r\n      previousSibling = previousSibling.previousElementSibling;\r\n    }\r\n    if (!previousSibling) {\r\n      throw new Error('mpr-form-control-valid must have a formcontrol sibiling');\r\n    }\r\n    return previousSibling;\r\n  }\r\n\r\n  /**\r\n   * èªå¨æ¥æ¾å½åéªè¯å¯¹åºçformControlNameæèformGroupName\r\n   */\r\n  private getFormControlName(): string {\r\n    if (this.controlName) {\r\n      // æå¨è®¾å®äºcontrolName\r\n      return this.controlName;\r\n    }\r\n\r\n    let controlName;\r\n    if (!this.container) {\r\n      throw new Error('only one [formControl] not support, There must be a formGroupName or [formGroup]');\r\n    } else {\r\n      const parentElement: Element = this.getParentGroupELem();\r\n      const groupValidControlLength = parentElement.querySelectorAll(VALID_COMPONENT_NAME).length;\r\n      this.groupValidControlLength = groupValidControlLength;\r\n      if (this.container instanceof FormGroupDirective && groupValidControlLength <= 1) {\r\n        // ç´æ¥æ¯æ ¹èç¹å¯¹åºæ´ä¸ªfrom [formGroup]=\"formGroup\"\r\n        // æ´ä¸ªformè¡¨ååªæä¸ä¸ªmpr-form-control-validï¼åä»¥å½åformGroupå¯¹åºçåéåä¸ºcontrolName\r\n        throw new Error('you should set controlName by yourself');\r\n      } else if (this.container instanceof FormGroupName && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = parentElement.getAttribute('formgroupname') || parentElement.getAttribute('fromGroupName');\r\n      } else if (this.container instanceof NgModelGroup && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = this.container.name;\r\n      } else {\r\n        // mpr-form-control-valid å¯¹åºä¸ä¸ª formControlName\r\n        // ååæ¥æ¾åå¼èç¹\r\n        const siblingElem = this.getSlibingFormContrlElem(this.elemRef.nativeElement);\r\n        controlName = siblingElem.getAttribute('formcontrolname') ||\r\n          siblingElem.getAttribute('formControlName') ||\r\n          siblingElem.getAttribute('name');\r\n      }\r\n    }\r\n    // if(this.controlName && this.controlName != controlName){\r\n    //   throw new Error(`you may set a error controlName, you set is: ${this.controlName}, but need is: ${controlName}`);\r\n    // }\r\n    return controlName;\r\n  }\r\n\r\n  /**\r\n   * è·åå½åformControlç¸å¯¹äºformGroupçpath\r\n   * @param formControl\r\n   * @param root\r\n   * @param controlName\r\n   */\r\n  private getPath(formControl: AbstractControl, root, controlName) {\r\n    if (!(root instanceof FormGroup)) {\r\n      if (formControl === root) {\r\n        return controlName;\r\n      }\r\n      return '';\r\n    }\r\n    const path = [];\r\n    for (const ctrlName in root['controls']) {\r\n      if (root['controls'][ctrlName] === formControl) {\r\n        return ctrlName;\r\n      }\r\n      if (root['controls'][ctrlName] instanceof FormGroup) {\r\n        const tmpPath = this.getPath(formControl, root['controls'][ctrlName], controlName);\r\n        if (tmpPath) {\r\n          path.push(ctrlName);\r\n          path.push(tmpPath);\r\n          return path.join('.');\r\n        }\r\n      }\r\n    }\r\n    return path.join('.');\r\n  }\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\n\r\n@Directive({\r\n  selector: '[isliFormValidMsg]',\r\n  providers: [FormValidMsgService]\r\n})\r\nexport class FormValidMsgDirective {\r\n\r\n  @Input('isliFormValidMsg') set validMsg(msg) {\r\n    if (msg) {\r\n      this.msgServ.resetMsg(msg);\r\n    }\r\n  }\r\n\r\n  constructor(private msgServ: FormValidMsgService) {\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nexport interface ISBN {\r\n  isbn1: string;\r\n  isbn2: string;\r\n  isbn3: string;\r\n  isbn4: string;\r\n  isbn5: string;\r\n}\r\n\r\nconst ISBN_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnValid]',\r\n  providers: [ISBN_VALIDTOR]\r\n})\r\nexport class IsbnValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbn', 'è¯·è¾å¥æ­£ç¡®çISBNå·');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    // ä¸éªè¯éç©º\r\n    if (!isbn.isbn1 || !isbn.isbn2 || !isbn.isbn3 || !isbn.isbn4 || !isbn.isbn5) {\r\n      return null;\r\n    }\r\n\r\n    if (this.validISBNCode([isbn.isbn1, isbn.isbn2, isbn.isbn3, isbn.isbn4, isbn.isbn5].join(''))) {\r\n      return { isbn: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validISBNCode(s) {\r\n    if (s === '9999999999999') {\r\n      return true;\r\n    }\r\n    if (!this.isBarCode(s)) {\r\n      return false;\r\n    }\r\n    let a = 0, b = 0, c = 0, d = 0, e;\r\n    for (let i = 1; i <= 12; i++) {\r\n      const sc = parseInt(s[i - 1], 10);\r\n      if (i <= 12 && i % 2 === 0) {\r\n        a += sc;\r\n      } else if (i <= 11 && i % 2 === 1) {\r\n        b += sc;\r\n      }\r\n    }\r\n    c = a * 3;\r\n    d = b + c;\r\n    if (d % 10 === 0) {\r\n      e = d - d;\r\n    } else {\r\n      e = d + (10 - d % 10) - d;\r\n    }\r\n    return e === parseInt(s[12], 10);\r\n  }\r\n\r\n  private isBarCode(s): boolean {\r\n    if (s.length !== 13) {\r\n      return false;\r\n    }\r\n    const reg = new RegExp(/^[0-9]{12}$/);\r\n    return reg.exec(s.substring(0, 12)) != null;\r\n  }\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { ISBN } from './isbn-validtor.directive';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_PART_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnPartValidDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnPartValid]',\r\n  providers: [ISBN_PART_VALIDTOR]\r\n})\r\nexport class IsbnPartValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnPart34', 'ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    if (!isbn.isbn3 || !isbn.isbn4) {\r\n      return null;\r\n    }\r\n    // éªè¯ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­\r\n    if (isbn.isbn3.length + isbn.isbn4.length !== 8) {\r\n      return { isbnPart34: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_HEADER_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => IsbnHeaderValidDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnHeaderValid]',\r\n  providers: [ISBN_HEADER_VALIDTOR]\r\n})\r\nexport class IsbnHeaderValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnHeader', 'ç¬¬ä¸ç»å¿é¡»ä¸º978æ979');\r\n  }\r\n\r\n  validate(c: AbstractControl) {\r\n    if (!c.value) {\r\n      return null;\r\n    }\r\n    if (['999', '978', '979', '000'].indexOf(c.value) < 0) {\r\n      return { isbnHeader: true};\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst FLOAT_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => FloatOnlyValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprFloatOnlyValidtor]',\r\n  providers: [FLOAT_VALIDTOR]\r\n})\r\nexport class FloatOnlyValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('float', 'è¯·è¾å¥æµ®ç¹æ°');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    const floatVal = parseFloat('' + c.value);\r\n    if (isNaN(floatVal)) {\r\n      return { float: true };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[formGroup]'\r\n})\r\nexport class MprFormGroupDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { FormControlValidComponent } from './form-control-valid/form-control-valid.component';\r\nimport { FormValidMsgDirective } from './directives/form-valid-msg.directive';\r\nimport { GlobalValidService } from './services/global-valid.service';\r\nimport { FormValidMsgService } from './services/form-valid-msg.service';\r\nimport { IsbnValidtorDirective } from './validtors/isbn-validtor.directive';\r\nimport { IsbnPartValidDirective } from './validtors/isbn-part-valid.directive';\r\nimport { IsbnHeaderValidDirective } from './validtors/isbn-header-valid.directive';\r\nimport { FloatOnlyValidtorDirective } from './validtors/float-only-validtor.directive';\r\nimport { MprFormGroupDirective } from './directives/form-group.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective\r\n  ],\r\n  exports: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective\r\n  ],\r\n  providers: [\r\n    GlobalValidService,\r\n    FormValidMsgService\r\n  ]\r\n})\r\nexport class FormValidModule { }\r\n"]}