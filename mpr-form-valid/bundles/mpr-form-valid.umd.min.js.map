{"version":3,"sources":["ng://mpr-form-valid/lib/services/global-valid-msg.service.ts","ng://mpr-form-valid/lib/services/form-valid-msg.service.ts","ng://mpr-form-valid/lib/services/global-valid.service.ts","ng://mpr-form-valid/lib/form-control-valid/form-control-valid.component.ts","ng://mpr-form-valid/lib/directives/form-valid-msg.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-validtor.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-part-valid.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-header-valid.directive.ts","ng://mpr-form-valid/lib/validtors/float-only-validtor.ts","ng://mpr-form-valid/lib/validtors/price-validtor.ts","ng://mpr-form-valid/lib/validtors/email-validtor.ts","ng://mpr-form-valid/lib/form-valid.module.ts"],"names":["globalValidMsgServ","GlobalValidMsgService","Map","prototype","registerMsg","msgKey","msgValue","Error","this","validMsg","set","getMsg","get","FormValidMsgService","setValidMsg","getValidMsg","msgPath","error","name_1","resetMsg","msg","name_2","formatMsg","path","result","name_3","Injectable","GlobalValidService","registerValidForm","form","index","validForms","findIndex","elem","count","push","validAll","forEach","elemForm","patchValue","value","emitModelToViewChange","emitViewToModelChange","onlySelf","valid","unregisterValidForm","splice","VALID_COMPONENT_NAME","FormControlValidComponent","controlName","container","errMsgServ","globalValidServ","elemRef","replace","ngOnInit","ngAfterContentInit","_this","Promise","resolve","then","bindControlErrorMsg","getFormControlName","console","log","groupValidControlLength","formControl","control","getPath","root","valueChanges","subscribe","onlyGroup","errorMsg","errors","getGroupControlValidMsg","ngOnDestroy","FormControl","controls","getParentGroupELem","parentElement","nativeElement","getAttribute","nodeName","toLocaleLowerCase","getSlibingFormContrlElem","searchElem","previousSibling","previousElementSibling","hasAttribute","querySelectorAll","length","FormGroupDirective","FormGroupName","NgModelGroup","name","siblingElem","FormGroup","ctrlName","tmpPath","join","Component","args","selector","template","styles","Attribute","ControlContainer","decorators","type","Optional","ElementRef","Input","ContentChild","TemplateRef","FormValidMsgDirective","msgServ","Object","defineProperty","Directive","providers","ISBN_VALIDTOR","provide","NG_VALIDATORS","useExisting","forwardRef","IsbnValidtorDirective","multi","validate","c","isbn","isbn1","isbn2","isbn3","isbn4","isbn5","validISBNCode","s","isBarCode","d","a","b","i","sc","parseInt","RegExp","exec","substring","ISBN_PART_VALIDTOR","IsbnPartValidDirective","isbnPart34","ISBN_HEADER_VALIDTOR","IsbnHeaderValidDirective","indexOf","isbnHeader","FLOAT_VALIDTOR","FloatValidtor","floatVal","parseFloat","isNaN","float","PRICE_VALIDTOR","PriceValidtor","price","test","EMAIL_VALIDTOR","EmailValidtor","contorl","email","emailError","FormValidModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * å¨å±éªè¯æ¶æ¯ï¼ å­å¨é»è®¤æ¶æ¯\r\n */\r\nexport class GlobalValidMsgService {\r\n\r\n  private validMsg = new Map<String, String>();\r\n  constructor() { }\r\n\r\n  /**\r\n   * è®¾ç½®éè¯¯keyçé»è®¤æ¶æ¯\r\n   * @param msgKey éè¯¯key\r\n   * @param msgValue éè¯¯æ¶æ¯\r\n   */\r\n  public registerMsg(msgKey: string, msgValue: string) {\r\n    if (!msgKey || !msgValue) {\r\n      throw new Error('msg key and value must not empty');\r\n    }\r\n    this.validMsg.set(msgKey, msgValue);\r\n  }\r\n\r\n  public getMsg(msgKey: string) {\r\n    if (!msgKey) {\r\n      return null;\r\n    }\r\n    return this.validMsg.get(msgKey);\r\n  }\r\n}\r\n\r\n\r\nexport const globalValidMsgServ = new GlobalValidMsgService();\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { globalValidMsgServ } from './global-valid-msg.service';\r\n\r\n@Injectable()\r\nexport class FormValidMsgService {\r\n\r\n  private validMsg = {};\r\n  constructor() { }\r\n\r\n  public setValidMsg(msgKey: string, msgValue: string) {\r\n    if (!msgValue) {\r\n      return;\r\n    }\r\n    this.validMsg[msgKey] = msgValue;\r\n  }\r\n\r\n  public getValidMsg(msgPath: string, error) {\r\n    if (!error || !msgPath) {\r\n      return '';\r\n    }\r\n    for (const name in error) {\r\n      if (error[name]) {\r\n        return this.validMsg[msgPath + '.' + name] || globalValidMsgServ.getMsg(name);\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  public resetMsg(msg: Object) {\r\n    if (typeof msg !== 'object') {\r\n      throw Error('form valid msg must be a object');\r\n    }\r\n    this.validMsg = {};\r\n\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        this.validMsg[name] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], name, this.validMsg);\r\n      }\r\n    }\r\n  }\r\n\r\n  private formatMsg(msg: Object, path: string, result: Object) {\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        result[path + '.' + name] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], path + '.' + name, result);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class GlobalValidService {\r\n\r\n  private validForms: Array<any> = [];\r\n\r\n  constructor() { }\r\n\r\n  public registerValidForm(form: AbstractControl) {\r\n    const index = this.validForms.findIndex(elem => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0) {\r\n      this.validForms[index].count += 1;\r\n    } else {\r\n      this.validForms.push({ form: form, count: 1 });\r\n    }\r\n  }\r\n\r\n  public validAll() {\r\n    let result = true;\r\n    this.validForms.forEach(elemForm => {\r\n      // elemForm.markAsDirty({onlySelf: true});\r\n      // if (elemForm instanceof FormGroup) {\r\n      //   this.validFormGroup(elemForm);\r\n      // }\r\n      elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n      result = elemForm.form.valid && result;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public unregisterValidForm(form) {\r\n    const index = this.validForms.findIndex(elem => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0 && this.validForms[index].count > 1) {\r\n      this.validForms[index].count -= 1;\r\n    } else {\r\n      this.validForms.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // private validFormGroup(formGroup: FormGroup) {\r\n  //   formGroup.markAsDirty({onlySelf: true});\r\n  //   const formControls = formGroup.controls;\r\n  //   for (const name in formControls) {\r\n  //     if (formControls[name] instanceof FormGroup) {\r\n  //       this.validFormGroup(<FormGroup>formControls[name]);\r\n  //     } else {\r\n  //       formControls[name].markAsDirty({onlySelf: true});\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n}\r\n","import {\r\n  Component, OnInit, ContentChild, TemplateRef, Input, Inject,\r\n  AfterContentInit, ElementRef, Attribute, Optional\r\n} from '@angular/core';\r\nimport {\r\n  ControlContainer, AbstractControl, AbstractControlDirective,\r\n  FormControl, FormGroup, FormGroupName, FormGroupDirective, NgModelGroup\r\n} from '@angular/forms';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\nimport { GlobalValidService } from '../services/global-valid.service';\r\n\r\nconst VALID_COMPONENT_NAME = 'mpr-form-control-valid';\r\n\r\n@Component({\r\n  selector: VALID_COMPONENT_NAME,\r\n  template: `<span\n    class=\"error\"\n    [ngClass]=\"errorPrompt\"\n    [hidden]=\"!errorMsg\"\n>\n    <ng-container\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{errorMsg:errorMsg}\"\n    ></ng-container>\n    <p *ngIf=\"!template\">{{errorMsg}}</p>\n</span>\n`,\r\n  styles: [`p{width:100%;height:17px;line-height:17px;color:#e06a2f;float:left}`]\r\n})\r\nexport class FormControlValidComponent implements OnInit, AfterContentInit {\r\n\r\n  //åªæ¾ç¤ºformgroupæ¬èº«çéè¯¯ï¼ä¸æ¾ç¤ºgroupä¸controlçéè¯¯\r\n  @Input() onlyGroup = false;\r\n  @Input() errorPrompt;\r\n\r\n  @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  public errorMsg: string; //éªè¯å¤±è´¥æ¾ç¤ºçéè¯¯æ¶æ¯\r\n\r\n  private formControl: AbstractControl;\r\n  private controlName: string;\r\n  private groupValidControlLength = 1;\r\n\r\n  constructor(\r\n    @Attribute('controlName') controlName: string,\r\n    @Optional() private container: ControlContainer,\r\n    private errMsgServ: FormValidMsgService,\r\n    private globalValidServ: GlobalValidService,\r\n    private elemRef: ElementRef) {\r\n    if (controlName) {\r\n      this.controlName = controlName.replace(/'/g, '');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    //  å¼å®¹ngFrom\r\n    Promise.resolve(null).then(() => {\r\n      this.bindControlErrorMsg();\r\n    });\r\n  }\r\n\r\n  bindControlErrorMsg() {\r\n    this.controlName = this.getFormControlName();\r\n    if (!this.controlName) {\r\n      throw new Error(\"can't find controlName\");\r\n    }\r\n    console.log(this.controlName);\r\n    let path = '';\r\n    if (this.groupValidControlLength <= 1) {\r\n      // from root or from formGroupName\r\n      this.formControl = this.container.control;\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.valueChanges.subscribe(() => {\r\n        if (this.onlyGroup) {\r\n          this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors);\r\n        } else {\r\n          this.errorMsg = this.getGroupControlValidMsg(<any>this.formControl, path || this.controlName);\r\n        }\r\n      });\r\n    } else {\r\n      this.formControl = this.container.control.get(this.controlName);\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.valueChanges.subscribe(() => {\r\n        this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors);\r\n      });\r\n    }\r\n    if (!this.formControl) {\r\n      throw new Error('formControl instance not find');\r\n    }\r\n    this.globalValidServ.registerValidForm(this.formControl['root'] || this.formControl);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //Called once, before the instance is destroyed.\r\n    //Add 'implements OnDestroy' to the class.\r\n    this.globalValidServ.unregisterValidForm(this.formControl['root'] || this.formControl);\r\n  }\r\n\r\n  /**\r\n   * è·ågroupä¸é¢çææéªè¯éè¯¯æ¶æ¯\r\n   * @param control \r\n   * @param path \r\n   */\r\n  private getGroupControlValidMsg(control: FormGroup | FormControl, path: string) {\r\n    if (control instanceof FormControl) {\r\n      return this.errMsgServ.getValidMsg(path, control.errors);\r\n    }\r\n    let msg;\r\n    for (let name in control.controls) {\r\n      msg = this.getGroupControlValidMsg(<any>control.get(name), path + '.' + name);\r\n      if (msg) {\r\n        return msg;\r\n      }\r\n    }\r\n    return this.errMsgServ.getValidMsg(path, control.errors);\r\n  }\r\n\r\n  private getParentGroupELem(): Element {\r\n    let parentElement: Element = this.elemRef.nativeElement.parentElement;\r\n    // const arrtributeNames: Array<string> = parentElement.getAttributeNames();\r\n    console.log(parentElement.getAttribute('ng-reflect-form'));\r\n    while (!parentElement.getAttribute('formgroupname')\r\n      && !parentElement.getAttribute('formGroupName')\r\n      && !parentElement.getAttribute('ng-reflect-form')\r\n      && !(parentElement.nodeName.toLocaleLowerCase() === 'form')\r\n      && !(parentElement.nodeName.toLocaleLowerCase() === 'ngform')) {\r\n      parentElement = parentElement.parentElement;\r\n    }\r\n    if (!parentElement) {\r\n      throw new Error(\"can not find parentElement\");\r\n    }\r\n    return parentElement;\r\n  }\r\n\r\n  private getSlibingFormContrlElem(searchElem: Element) {\r\n    let previousSibling: Element = searchElem.previousElementSibling;\r\n    while (previousSibling &&\r\n      !previousSibling.hasAttribute('formcontrolname') &&\r\n      !previousSibling.hasAttribute('formControlName') &&\r\n      !previousSibling.hasAttribute('name')) {\r\n      // if(previousSibling.hasAttribute(\"formGroupName\") || previousSibling.hasAttribute(\"[formGroup]\")){\r\n      //   throw new Error(\"have search to root\");\r\n      // }\r\n      previousSibling = previousSibling.previousElementSibling;\r\n    }\r\n    if (!previousSibling) {\r\n      throw new Error('mpr-form-control-valid must have a formcontrol sibiling');\r\n    }\r\n    return previousSibling;\r\n  }\r\n\r\n  /**\r\n   * èªå¨æ¥æ¾å½åéªè¯å¯¹åºçformControlNameæèformGroupName\r\n   */\r\n  private getFormControlName(): string {\r\n    if (this.controlName) {\r\n      // æå¨è®¾å®äºcontrolName\r\n      return this.controlName;\r\n    }\r\n\r\n    let controlName;\r\n    if (!this.container) {\r\n      throw new Error('only one [formControl] not support, There must be a formGroupName or [formGroup]');\r\n    } else {\r\n      const parentElement: Element = this.getParentGroupELem();\r\n      const groupValidControlLength = parentElement.querySelectorAll(VALID_COMPONENT_NAME).length;\r\n      this.groupValidControlLength = groupValidControlLength;\r\n      if (this.container instanceof FormGroupDirective && groupValidControlLength <= 1) {\r\n        // ç´æ¥æ¯æ ¹èç¹å¯¹åºæ´ä¸ªfrom [formGroup]=\"formGroup\"\r\n        // æ´ä¸ªformè¡¨ååªæä¸ä¸ªmpr-form-control-validï¼åä»¥å½åformGroupå¯¹åºçåéåä¸ºcontrolName\r\n        throw new Error('you should set controlName by yourself');\r\n      } else if (this.container instanceof FormGroupName && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = parentElement.getAttribute('formgroupname') || parentElement.getAttribute('fromGroupName');\r\n      } else if (this.container instanceof NgModelGroup && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = this.container.name;\r\n      } else {\r\n        // mpr-form-control-valid å¯¹åºä¸ä¸ª formControlName\r\n        // ååæ¥æ¾åå¼èç¹\r\n        const siblingElem = this.getSlibingFormContrlElem(this.elemRef.nativeElement);\r\n        controlName = siblingElem.getAttribute('formcontrolname') ||\r\n          siblingElem.getAttribute('formControlName') ||\r\n          siblingElem.getAttribute('name');\r\n      }\r\n    }\r\n    // if(this.controlName && this.controlName != controlName){\r\n    //   throw new Error(`you may set a error controlName, you set is: ${this.controlName}, but need is: ${controlName}`);\r\n    // }\r\n    return controlName;\r\n  }\r\n\r\n  /**\r\n   * è·åå½åformControlç¸å¯¹äºformGroupçpath\r\n   * @param formControl \r\n   * @param root \r\n   * @param controlName \r\n   */\r\n  private getPath(formControl: AbstractControl, root, controlName) {\r\n    if (!(root instanceof FormGroup)) {\r\n      if (formControl === root) {\r\n        return controlName;\r\n      }\r\n      return '';\r\n    }\r\n    const path = [];\r\n    for (const ctrlName in root['controls']) {\r\n      if (root['controls'][ctrlName] === formControl) {\r\n        return ctrlName;\r\n      }\r\n      if (root['controls'][ctrlName] instanceof FormGroup) {\r\n        const tmpPath = this.getPath(formControl, root['controls'][ctrlName], controlName);\r\n        if (tmpPath) {\r\n          path.push(ctrlName);\r\n          path.push(tmpPath);\r\n          return path.join('.');\r\n        }\r\n      }\r\n    }\r\n    return path.join('.');\r\n  }\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\n\r\n@Directive({\r\n  selector: '[isliFormValidMsg]',\r\n  providers: [FormValidMsgService]\r\n})\r\nexport class FormValidMsgDirective {\r\n\r\n  @Input('isliFormValidMsg') set validMsg(msg) {\r\n    if (msg) {\r\n      this.msgServ.resetMsg(msg);\r\n    }\r\n  }\r\n\r\n  constructor(private msgServ: FormValidMsgService) {\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\n\nexport interface ISBN {\n  isbn1: string;\n  isbn2: string;\n  isbn3: string;\n  isbn4: string;\n  isbn5: string;\n}\n\nconst ISBN_VALIDTOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => IsbnValidtorDirective),\n  multi: true\n};\n\n@Directive({\n  selector: '[mprIsbnValid]',\n  providers: [ISBN_VALIDTOR]\n})\nexport class IsbnValidtorDirective implements Validator {\n\n  constructor() {\n    globalValidMsgServ.registerMsg('isbn', 'è¯·è¾å¥æ­£ç¡®çISBNå·');\n  }\n\n  public validate(c: AbstractControl) {\n    if (!(c instanceof FormGroup)) {\n      throw new Error('isbn must be a group control');\n    }\n    const isbn: ISBN = c.value;\n    // ä¸éªè¯éç©º\n    if (!isbn.isbn1 || !isbn.isbn2 || !isbn.isbn3 || !isbn.isbn4 || !isbn.isbn5) {\n      return null;\n    }\n\n    if (this.validISBNCode([isbn.isbn1, isbn.isbn2, isbn.isbn3, isbn.isbn4, isbn.isbn5].join(''))) {\n      return { isbn: true };\n    }\n    return null;\n  }\n\n  private validISBNCode(s) {\n    if (s === '9999999999999') {\n      return true;\n    }\n    if (!this.isBarCode(s)) {\n      return false;\n    }\n    let a = 0, b = 0, c = 0, d = 0, e;\n    for (let i = 1; i <= 12; i++) {\n      const sc = parseInt(s[i - 1], 10);\n      if (i <= 12 && i % 2 === 0) {\n        a += sc;\n      } else if (i <= 11 && i % 2 === 1) {\n        b += sc;\n      }\n    }\n    c = a * 3;\n    d = b + c;\n    if (d % 10 === 0) {\n      e = d - d;\n    } else {\n      e = d + (10 - d % 10) - d;\n    }\n    return e === parseInt(s[12], 10);\n  }\n\n  private isBarCode(s): boolean {\n    if (s.length !== 13) {\n      return false;\n    }\n    const reg = new RegExp(/^[0-9]{12}$/);\n    return reg.exec(s.substring(0, 12)) != null;\n  }\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\nimport { ISBN } from './isbn-validtor.directive';\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\n\nconst ISBN_PART_VALIDTOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => IsbnPartValidDirective),\n  multi: true\n};\n\n@Directive({\n  selector: '[mprIsbnPartValid]',\n  providers: [ISBN_PART_VALIDTOR]\n})\nexport class IsbnPartValidDirective implements Validator {\n\n  constructor() {\n    globalValidMsgServ.registerMsg('isbnPart34', 'ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­');\n  }\n\n  public validate(c: AbstractControl) {\n    if (!(c instanceof FormGroup)) {\n      throw new Error('isbn must be a group control');\n    }\n    const isbn: ISBN = c.value;\n    if (!isbn.isbn3 || !isbn.isbn4) {\n      return null;\n    }\n    // éªè¯ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­\n    if (isbn.isbn3.length + isbn.isbn4.length !== 8) {\n      return { isbnPart34: true };\n    }\n    return null;\n  }\n\n}\n","import { Directive, forwardRef } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\n\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\n\nconst ISBN_HEADER_VALIDTOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IsbnHeaderValidDirective),\n    multi: true\n};\n\n@Directive({\n  selector: '[mprIsbnHeaderValid]',\n  providers: [ISBN_HEADER_VALIDTOR]\n})\nexport class IsbnHeaderValidDirective implements Validator {\n\n  constructor() {\n    globalValidMsgServ.registerMsg('isbnHeader', 'ç¬¬ä¸ç»å¿é¡»ä¸º978æ979');\n  }\n\n  validate(c: AbstractControl) {\n    if (!c.value) {\n      return null;\n    }\n    if (['999', '978', '979', '000'].indexOf(c.value) < 0) {\n      return { isbnHeader: true};\n    }\n    return null;\n  }\n\n}\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst FLOAT_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => FloatValidtor),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[mprFloatOnly]',\r\n    providers: [FLOAT_VALIDTOR]\r\n})\r\nexport class FloatValidtor implements Validator {\r\n    constructor() {\r\n        globalValidMsgServ.registerMsg('float', 'è¯·è¾å¥æµ®ç¹æ°');\r\n    }\r\n\r\n    public validate(c: AbstractControl) {\r\n        const floatVal = parseFloat('' + c.value);\r\n        if (isNaN(floatVal)) {\r\n            return { float: true };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst PRICE_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => PriceValidtor),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[mprPriceValid]',\r\n    providers: [PRICE_VALIDTOR]\r\n})\r\nexport class PriceValidtor implements Validator {\r\n\r\n    constructor() {\r\n        globalValidMsgServ.registerMsg('price', 'ä»·æ ¼ä¸ºä¸¤ä½å°æ°');\r\n    }\r\n\r\n    public validate(c: AbstractControl) {\r\n        const price = '' + c.value;\r\n        if (/^\\d+(.\\d{0,2})?$/.test(price)) {\r\n            return null;\r\n        }\r\n        return { price: true };\r\n    }\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst EMAIL_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => EmailValidtor),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[mprEmailValid]',\r\n    providers: [EMAIL_VALIDTOR]\r\n})\r\nexport class EmailValidtor implements Validator {\r\n\r\n    constructor() {\r\n        globalValidMsgServ.registerMsg('emailError', 'è¯·è¾å¥åæ³çé®ç®±');\r\n    }\r\n\r\n    validate(contorl: AbstractControl) {\r\n        const email = contorl.value;\r\n        if (!email) { // åè®¸ä¸ºç©º\r\n            return null;\r\n        }\r\n        if (!/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/g.test(email)) {\r\n            return { emailError: true };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FormControlValidComponent } from './form-control-valid/form-control-valid.component';\r\nimport { FormValidMsgDirective } from './directives/form-valid-msg.directive';\r\nimport { GlobalValidService } from './services/global-valid.service';\r\nimport { FormValidMsgService } from './services/form-valid-msg.service';\r\nimport { IsbnValidtorDirective } from './validtors/isbn-validtor.directive';\r\nimport { IsbnPartValidDirective } from './validtors/isbn-part-valid.directive';\r\nimport { IsbnHeaderValidDirective } from './validtors/isbn-header-valid.directive';\r\nimport { EmailValidtor, FloatValidtor, PriceValidtor } from './validtors';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    EmailValidtor,\r\n    FloatValidtor,\r\n    PriceValidtor\r\n  ],\r\n  exports: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    EmailValidtor,\r\n    FloatValidtor,\r\n    PriceValidtor\r\n  ],\r\n  providers: [\r\n    GlobalValidService,\r\n    FormValidMsgService\r\n  ]\r\n})\r\nexport class FormValidModule { }\r\n"]}