{"version":3,"sources":["ng://mpr-form-valid/lib/services/global-valid-msg.service.ts","ng://mpr-form-valid/lib/services/form-valid-msg.service.ts","ng://mpr-form-valid/lib/services/global-valid.service.ts","ng://mpr-form-valid/lib/form-control-valid/form-control-valid.component.ts","ng://mpr-form-valid/lib/directives/form-valid-msg.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-validtor.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-part-valid.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-header-valid.directive.ts","ng://mpr-form-valid/lib/validtors/float-only-validtor.directive.ts","ng://mpr-form-valid/lib/directives/form-group.directive.ts","ng://mpr-form-valid/lib/directives/form.directive.ts","ng://mpr-form-valid/lib/form-valid.module.ts"],"names":["GlobalValidMsgService","Map","prototype","registerMsg","msgKey","msgValue","Error","this","validMsg","set","toLowerCase","getMsg","get","globalValidMsgServ","FormValidMsgService","setValidMsg","getValidMsg","msgPath","error","tmpMsg","tmpWeight","minWeight","Number","MAX_VALUE","errorMsg","name_1","isNaN","resetMsg","msg","name_2","formatMsg","path","result","name_3","Injectable","GlobalValidService","registerValidForm","form","errorHook","index","validForms","findIndex","elem","count","length","push","errorHooks","resetNull","forEach","elemForm","FormControl","reset","emitEvent","onlySelf","setErrors","_this","resetGroup","unsubscribe","sub","valueChanges","subscribe","validAll","valid","console","log","status","setValue","value","emitModelToViewChange","emitViewToModelChange","statusChanges","emit","validFormGroup","unregisterValidForm","fIndex","indexOf","splice","formGroup","formControls","controls","hasOwnProperty","FormGroup","VALID_COMPONENT_NAME","FormControlValidComponent","controlName","container","errMsgServ","globalValidServ","elemRef","replace","ngOnInit","ngAfterContentInit","Promise","resolve","then","bindControlErrorMsg","getFormControlName","control","formControl","getPath","root","errors","onlyGroup","getGroupControlValidMsg","ngOnDestroy","setFormControlMsgListener","errorInfo","tmpErrorInfo","getParentGroupELem","parentElement","nativeElement","getAttribute","nodeName","toLocaleLowerCase","getSlibingFormContrlElem","searchElem","previousSibling","previousElementSibling","hasAttribute","groupValidControlLength","querySelectorAll","FormGroupDirective","FormGroupName","NgModelGroup","name","siblingElem","ctrlName","tmpPath","join","Component","args","selector","template","styles","Attribute","ControlContainer","decorators","type","Optional","ElementRef","Input","ContentChild","TemplateRef","FormValidMsgDirective","msgServ","Object","defineProperty","Directive","providers","ISBN_VALIDTOR","provide","NG_VALIDATORS","useExisting","forwardRef","IsbnValidtorDirective","multi","validate","c","isbn","isbn1","isbn2","isbn3","isbn4","isbn5","validISBNCode","s","isBarCode","d","a","b","i","sc","parseInt","RegExp","exec","substring","ISBN_PART_VALIDTOR","IsbnPartValidDirective","isbnPart34","ISBN_HEADER_VALIDTOR","IsbnHeaderValidDirective","isbnHeader","FLOAT_VALIDTOR","FloatOnlyValidtorDirective","floatVal","parseFloat","float","MprFormGroupDirective","render","setAttribute","Renderer2","MprFormDirective","FormValidModule","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * å¨å±éªè¯æ¶æ¯ï¼ å­å¨é»è®¤æ¶æ¯\r\n */\r\nexport class GlobalValidMsgService {\r\n\tprivate validMsg = new Map<String, String>();\r\n\tconstructor() {}\r\n\r\n\t/**\r\n   * è®¾ç½®éè¯¯keyçé»è®¤æ¶æ¯\r\n   * @param msgKey éè¯¯key\r\n   * @param msgValue éè¯¯æ¶æ¯\r\n   */\r\n\tpublic registerMsg(msgKey: string, msgValue: string) {\r\n\t\tif (!msgKey || !msgValue) {\r\n\t\t\tthrow new Error('msg key and value must not empty');\r\n\t\t}\r\n\t\tthis.validMsg.set(msgKey.toLowerCase(), msgValue);\r\n\t}\r\n\r\n\tpublic getMsg(msgKey: string) {\r\n\t\tif (!msgKey) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.validMsg.get(msgKey.toLowerCase());\r\n\t}\r\n}\r\n\r\nexport const globalValidMsgServ = new GlobalValidMsgService();\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { globalValidMsgServ } from './global-valid-msg.service';\r\n\r\n@Injectable()\r\nexport class FormValidMsgService {\r\n\r\n  private validMsg = {};\r\n  constructor() { }\r\n\r\n  public setValidMsg(msgKey: string, msgValue: string) {\r\n    if (!msgValue) {\r\n      return;\r\n    }\r\n    this.validMsg[msgKey.toLowerCase()] = msgValue;\r\n  }\r\n\r\n  public getValidMsg(msgPath: string, error) {\r\n    let minWeight = Number.MAX_VALUE;\r\n    let errorMsg = '';\r\n    let tmpMsg;\r\n    let tmpWeight;\r\n    msgPath = (msgPath || '').toLowerCase();\r\n    if (!error || !msgPath) {\r\n      return {errorMsg, minWeight};\r\n    }\r\n\r\n    for (let name in error) {\r\n      name = name.toLowerCase();\r\n      tmpMsg = this.validMsg[msgPath + '.' + name] || globalValidMsgServ.getMsg(name);\r\n      if(!tmpMsg){\r\n        continue;\r\n      }\r\n      if(Number.isNaN(Number(error[name]))){\r\n        tmpWeight = 1000;\r\n      }else{\r\n        tmpWeight = Number(error[name]);\r\n      }\r\n      if(tmpWeight < minWeight){\r\n        minWeight = tmpWeight;\r\n        errorMsg = tmpMsg;\r\n      }\r\n    }\r\n    return {errorMsg, minWeight};\r\n  }\r\n\r\n  public resetMsg(msg: Object) {\r\n    if (typeof msg !== 'object') {\r\n      throw Error('form valid msg must be a object');\r\n    }\r\n    //this.validMsg = {};\r\n\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        this.validMsg[name.toLowerCase()] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], name.toLowerCase(), this.validMsg);\r\n      }\r\n    }\r\n  }\r\n\r\n  private formatMsg(msg: Object, path: string, result: Object) {\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        result[path + '.' + name.toLowerCase()] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], path + '.' + name.toLowerCase(), result);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class GlobalValidService {\r\n  private validForms: Array<any> = [];\r\n\r\n  constructor() { }\r\n\r\n  public registerValidForm(form: AbstractControl, errorHook: Function) {\r\n    let index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0) {\r\n      this.validForms[index].count += 1;\r\n    } else {\r\n      index = this.validForms.length;\r\n      this.validForms.push({ form: form, count: 1, errorHooks: [] });\r\n    }\r\n    if(errorHook){\r\n      this.validForms[index].errorHooks.push(errorHook);\r\n    }\r\n\r\n  }\r\n\r\n  public resetNull() {\r\n    this.validForms.forEach((elemForm) => {\r\n      if (elemForm.form instanceof FormControl) {\r\n        elemForm.form.reset(null, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: true });\r\n      } else {\r\n        elemForm.form.reset({}, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: false });\r\n        this.resetGroup(elemForm.form);\r\n      }\r\n      if (elemForm['sub']) {\r\n        elemForm['sub'].unsubscribe();\r\n      }\r\n      elemForm.form['_reset'] = true;\r\n      const sub = elemForm.form.valueChanges.subscribe(() => {\r\n        elemForm.form['_reset'] = false;\r\n        elemForm['sub'].unsubscribe();\r\n        elemForm['sub'] = null;\r\n      });\r\n      elemForm['sub'] = sub;\r\n    });\r\n  }\r\n\r\n  public validAll() {\r\n    let result = true;\r\n    this.validForms.forEach((elemForm) => {\r\n      if (!elemForm.form.valid || elemForm.form['_reset']) {\r\n        //  if (elemForm.form['_reset']) {\r\n        //   elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n        //  }\r\n        //  elemForm.form.patchValue(elemForm.form.value, { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true });\r\n        if (elemForm.form instanceof FormControl) {\r\n          console.log(elemForm.form.status, elemForm.form);\r\n          if (elemForm.form['_reset']) {\r\n            elemForm.form['_reset'] = false;\r\n            elemForm.form.setValue(elemForm.form.value,\r\n              { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true, emitEvent: false });\r\n          }\r\n          elemForm.form.statusChanges.emit(elemForm.form.status);\r\n        } else {\r\n          this.validFormGroup(elemForm.form);\r\n        }\r\n        if(!elemForm.form.valid){\r\n          elemForm.errorHooks.forEach(errorHook => {\r\n            errorHook(elemForm.form);\r\n          });\r\n        }\r\n      }\r\n      result = elemForm.form.valid && result;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public unregisterValidForm(form, errorHook: Function) {\r\n    const index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0 && this.validForms[index].count > 1) {\r\n      this.validForms[index].count -= 1;\r\n      if(errorHook){\r\n        const fIndex = this.validForms[index].errorHooks.indexOf(errorHook);\r\n        if(fIndex != -1){\r\n          this.validForms[index].errorHooks.splice(fIndex, 1);\r\n        }\r\n      }\r\n    } else {\r\n      this.validForms.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private validFormGroup(formGroup: FormGroup) {\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        this.validFormGroup(<FormGroup>formControls[name]);\r\n      }\r\n      if (!formControls[name].valid || formControls[name]['_reset']) {\r\n        console.log(formControls[name].status, formControls[name]);\r\n        if (formControls[name]['_reset']) {\r\n          formControls[name]['_reset'] = false;\r\n          formControls[name].setValue(formControls[name].value,\r\n            { emitModelToViewChange: false, emitViewToModelChange: false, onlySelf: true, emitEvent: false });\r\n        }\r\n        (formControls[name].statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n      }\r\n      if (!formGroup.valid || formGroup['_reset']) {\r\n        if (formGroup['_reset']) {\r\n          formGroup['_reset'] = false;\r\n          formGroup.setValue(formGroup.value,\r\n            { onlySelf: true, emitEvent: false });\r\n        }\r\n        (formGroup.statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  private resetGroup(formGroup: FormGroup) {\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        formControls[name].setErrors(null, { emitEvent: false });\r\n        this.resetGroup(<FormGroup>formControls[name]);\r\n      } else {\r\n        formControls[name].setErrors(null, { emitEvent: true });\r\n      }\r\n      formControls[name]['_reset'] = true;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component, OnInit, ContentChild, TemplateRef, Input, Inject,\r\n  AfterContentInit, ElementRef, Attribute, Optional\r\n} from '@angular/core';\r\nimport {\r\n  ControlContainer, AbstractControl, AbstractControlDirective,\r\n  FormControl, FormGroup, FormGroupName, FormGroupDirective, NgModelGroup\r\n} from '@angular/forms';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\nimport { GlobalValidService } from '../services/global-valid.service';\r\n\r\nconst VALID_COMPONENT_NAME = 'mpr-form-control-valid';\r\n\r\n@Component({\r\n  selector: VALID_COMPONENT_NAME,\r\n  template: `<span\r\n    class=\"error\"\r\n    [ngClass]=\"errorPrompt\"\r\n    [hidden]=\"!errorMsg\"\r\n>\r\n    <ng-container\r\n        [ngTemplateOutlet]=\"template\"\r\n        [ngTemplateOutletContext]=\"{errorMsg:errorMsg}\"\r\n    ></ng-container>\r\n    <p *ngIf=\"!template\">{{errorMsg}}</p>\r\n</span>\r\n`,\r\n  styles: [`p{width:100%;height:17px;line-height:17px;color:#e06a2f;float:left}`]\r\n})\r\nexport class FormControlValidComponent implements OnInit, AfterContentInit {\r\n\r\n  //åªæ¾ç¤ºformgroupæ¬èº«çéè¯¯ï¼ä¸æ¾ç¤ºgroupä¸controlçéè¯¯\r\n  @Input() onlyGroup = false;\r\n  @Input() errorPrompt;\r\n  @Input() controlName;\r\n  @Input() errorHook: Function;\r\n\r\n  @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  public errorMsg: string; //éªè¯å¤±è´¥æ¾ç¤ºçéè¯¯æ¶æ¯\r\n\r\n  private formControl: AbstractControl;\r\n  private groupValidControlLength = 1;\r\n\r\n  constructor(\r\n    @Attribute('controlName') controlName: string,\r\n    @Optional() private container: ControlContainer,\r\n    private errMsgServ: FormValidMsgService,\r\n    private globalValidServ: GlobalValidService,\r\n    private elemRef: ElementRef) {\r\n    if (controlName) {\r\n      this.controlName = controlName.replace(/'/g, '');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    //  å¼å®¹ngFrom\r\n    Promise.resolve(null).then(() => {\r\n      this.bindControlErrorMsg();\r\n    });\r\n  }\r\n\r\n  bindControlErrorMsg() {\r\n    this.controlName = this.getFormControlName();\r\n    if (!this.controlName) {\r\n      throw new Error(\"can't find controlName\");\r\n    }\r\n    console.log(this.controlName);\r\n    let path = '';\r\n    const isFormControl = this.container.control.get(this.controlName)\r\n      && (this.container.control.get(this.controlName) instanceof FormControl);\r\n    if (!isFormControl) {\r\n      // from root or from formGroupName\r\n      this.formControl = this.container.control;\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.statusChanges.subscribe(() => {\r\n        if (this.onlyGroup) {\r\n          this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)['errorMsg'];\r\n        } else {\r\n          this.errorMsg = this.getGroupControlValidMsg(<any>this.formControl, path || this.controlName,\r\n            {minWeight: Number.MAX_VALUE, errorMsg: ''})['errorMsg'];\r\n        }\r\n      });\r\n    } else {\r\n      this.formControl = this.container.control.get(this.controlName);\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.statusChanges.subscribe(() => {\r\n        this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)['errorMsg'];\r\n      });\r\n    }\r\n    if (!this.formControl) {\r\n      throw new Error('formControl instance not find');\r\n    }\r\n    this.globalValidServ.registerValidForm(this.formControl['root'] || this.formControl, this.errorHook);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //Called once, before the instance is destroyed.\r\n    //Add 'implements OnDestroy' to the class.\r\n    this.globalValidServ.unregisterValidForm(this.formControl['root'] || this.formControl, this.errorHook);\r\n  }\r\n\r\n  private setFormControlMsgListener(control: FormGroup | FormControl, path){\r\n    control.valueChanges.subscribe(()=>{\r\n      let errorInfo = this.errMsgServ.getValidMsg(path || this.controlName, control.errors)\r\n    });\r\n    if(control instanceof FormGroup){\r\n      for (let name in control.controls){\r\n        this.setFormControlMsgListener(<any>control.get(name), path + '.' + name);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·ågroupä¸é¢çææéªè¯éè¯¯æ¶æ¯\r\n   * @param control\r\n   * @param path\r\n   */\r\n  private getGroupControlValidMsg(control: FormGroup | FormControl, path: string, errorInfo) {\r\n\r\n    if (control instanceof FormControl) {\r\n      return this.errMsgServ.getValidMsg(path, control.errors);\r\n    }\r\n    let tmpErrorInfo;\r\n    for (let name in control.controls) {\r\n      tmpErrorInfo = this.getGroupControlValidMsg(<any>control.get(name), path + '.' + name, errorInfo);\r\n      if(tmpErrorInfo['minWeight'] < errorInfo['minWeight']){\r\n        errorInfo = tmpErrorInfo;\r\n      }\r\n    }\r\n    tmpErrorInfo = this.errMsgServ.getValidMsg(path, control.errors);\r\n    if(tmpErrorInfo['minWeight'] < errorInfo['minWeight']){\r\n      errorInfo = tmpErrorInfo;\r\n    }\r\n    return errorInfo;\r\n  }\r\n\r\n  private getParentGroupELem(): Element {\r\n    let parentElement: Element = this.elemRef.nativeElement.parentElement;\r\n    // const arrtributeNames: Array<string> = parentElement.getAttributeNames();\r\n    // console.log(parentElement.getAttribute('ng-reflect-form'));\r\n    while (\r\n      parentElement &&\r\n      !parentElement.getAttribute('formgroupname')\r\n      && !parentElement.getAttribute('formGroupName')\r\n      && !parentElement.getAttribute('formgroup')) {\r\n      if(parentElement.nodeName.toLocaleLowerCase() === 'form' || parentElement.nodeName.toLocaleLowerCase() === 'ngform'){\r\n        break;\r\n      }\r\n      parentElement = parentElement.parentElement;\r\n    }\r\n    if (!parentElement) {\r\n      console.log(this.elemRef.nativeElement);\r\n      throw new Error(\"can not find parentElement\");\r\n    }\r\n    return parentElement;\r\n  }\r\n\r\n  private getSlibingFormContrlElem(searchElem: Element) {\r\n    let previousSibling: Element = searchElem.previousElementSibling;\r\n    while (previousSibling &&\r\n      !previousSibling.hasAttribute('formcontrolname') &&\r\n      !previousSibling.hasAttribute('formControlName') &&\r\n      !previousSibling.hasAttribute('name')) {\r\n      // if(previousSibling.hasAttribute(\"formGroupName\") || previousSibling.hasAttribute(\"[formGroup]\")){\r\n      //   throw new Error(\"have search to root\");\r\n      // }\r\n      previousSibling = previousSibling.previousElementSibling;\r\n    }\r\n    if (!previousSibling) {\r\n      throw new Error('mpr-form-control-valid must have a formcontrol sibiling');\r\n    }\r\n    return previousSibling;\r\n  }\r\n\r\n  /**\r\n   * èªå¨æ¥æ¾å½åéªè¯å¯¹åºçformControlNameæèformGroupName\r\n   */\r\n  private getFormControlName(): string {\r\n    if (this.controlName) {\r\n      // æå¨è®¾å®äºcontrolName\r\n      return this.controlName;\r\n    }\r\n\r\n    let controlName;\r\n    if (!this.container) {\r\n      throw new Error('only one [formControl] not support, There must be a formGroupName or [formGroup]');\r\n    } else {\r\n      const parentElement: Element = this.getParentGroupELem();\r\n      const groupValidControlLength = parentElement.querySelectorAll(VALID_COMPONENT_NAME).length;\r\n      this.groupValidControlLength = groupValidControlLength;\r\n      if (this.container instanceof FormGroupDirective && groupValidControlLength <= 1) {\r\n        // ç´æ¥æ¯æ ¹èç¹å¯¹åºæ´ä¸ªfrom [formGroup]=\"formGroup\"\r\n        // æ´ä¸ªformè¡¨ååªæä¸ä¸ªmpr-form-control-validï¼åä»¥å½åformGroupå¯¹åºçåéåä¸ºcontrolName\r\n        throw new Error('you should set controlName by yourself');\r\n      } else if (this.container instanceof FormGroupName && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = parentElement.getAttribute('formgroupname') || parentElement.getAttribute('fromGroupName');\r\n      } else if (this.container instanceof NgModelGroup && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = this.container.name;\r\n      } else {\r\n        // mpr-form-control-valid å¯¹åºä¸ä¸ª formControlName\r\n        // ååæ¥æ¾åå¼èç¹\r\n        const siblingElem = this.getSlibingFormContrlElem(this.elemRef.nativeElement);\r\n        controlName = siblingElem.getAttribute('formcontrolname') ||\r\n          siblingElem.getAttribute('formControlName') ||\r\n          siblingElem.getAttribute('name');\r\n      }\r\n    }\r\n    // if(this.controlName && this.controlName != controlName){\r\n    //   throw new Error(`you may set a error controlName, you set is: ${this.controlName}, but need is: ${controlName}`);\r\n    // }\r\n    return controlName;\r\n  }\r\n\r\n  /**\r\n   * è·åå½åformControlç¸å¯¹äºformGroupçpath\r\n   * @param formControl\r\n   * @param root\r\n   * @param controlName\r\n   */\r\n  private getPath(formControl: AbstractControl, root, controlName) {\r\n    if (!(root instanceof FormGroup)) {\r\n      if (formControl === root) {\r\n        return controlName;\r\n      }\r\n      return '';\r\n    }\r\n    const path = [];\r\n    for (const ctrlName in root['controls']) {\r\n      if (root['controls'][ctrlName] === formControl) {\r\n        return ctrlName;\r\n      }\r\n      if (root['controls'][ctrlName] instanceof FormGroup) {\r\n        const tmpPath = this.getPath(formControl, root['controls'][ctrlName], controlName);\r\n        if (tmpPath) {\r\n          path.push(ctrlName);\r\n          path.push(tmpPath);\r\n          return path.join('.');\r\n        }\r\n      }\r\n    }\r\n    return path.join('.');\r\n  }\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\n\r\n@Directive({\r\n  selector: '[isliFormValidMsg]',\r\n  providers: [FormValidMsgService]\r\n})\r\nexport class FormValidMsgDirective {\r\n\r\n  @Input('isliFormValidMsg') set validMsg(msg) {\r\n    if (msg) {\r\n      this.msgServ.resetMsg(msg);\r\n    }\r\n  }\r\n\r\n  constructor(private msgServ: FormValidMsgService) {\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nexport interface ISBN {\r\n  isbn1: string;\r\n  isbn2: string;\r\n  isbn3: string;\r\n  isbn4: string;\r\n  isbn5: string;\r\n}\r\n\r\nconst ISBN_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnValid]',\r\n  providers: [ISBN_VALIDTOR]\r\n})\r\nexport class IsbnValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbn', 'è¯·è¾å¥æ­£ç¡®çISBNå·');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    // ä¸éªè¯éç©º\r\n    if (!isbn.isbn1 || !isbn.isbn2 || !isbn.isbn3 || !isbn.isbn4 || !isbn.isbn5) {\r\n      return null;\r\n    }\r\n\r\n    if (this.validISBNCode([isbn.isbn1, isbn.isbn2, isbn.isbn3, isbn.isbn4, isbn.isbn5].join(''))) {\r\n      return { isbn: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validISBNCode(s) {\r\n    if (s === '9999999999999') {\r\n      return true;\r\n    }\r\n    if (!this.isBarCode(s)) {\r\n      return false;\r\n    }\r\n    let a = 0, b = 0, c = 0, d = 0, e;\r\n    for (let i = 1; i <= 12; i++) {\r\n      const sc = parseInt(s[i - 1], 10);\r\n      if (i <= 12 && i % 2 === 0) {\r\n        a += sc;\r\n      } else if (i <= 11 && i % 2 === 1) {\r\n        b += sc;\r\n      }\r\n    }\r\n    c = a * 3;\r\n    d = b + c;\r\n    if (d % 10 === 0) {\r\n      e = d - d;\r\n    } else {\r\n      e = d + (10 - d % 10) - d;\r\n    }\r\n    return e === parseInt(s[12], 10);\r\n  }\r\n\r\n  private isBarCode(s): boolean {\r\n    if (s.length !== 13) {\r\n      return false;\r\n    }\r\n    const reg = new RegExp(/^[0-9]{12}$/);\r\n    return reg.exec(s.substring(0, 12)) != null;\r\n  }\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { ISBN } from './isbn-validtor.directive';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_PART_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnPartValidDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnPartValid]',\r\n  providers: [ISBN_PART_VALIDTOR]\r\n})\r\nexport class IsbnPartValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnPart34', 'ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    if (!isbn.isbn3 || !isbn.isbn4) {\r\n      return null;\r\n    }\r\n    // éªè¯ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­\r\n    if (isbn.isbn3.length + isbn.isbn4.length !== 8) {\r\n      return { isbnPart34: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_HEADER_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => IsbnHeaderValidDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnHeaderValid]',\r\n  providers: [ISBN_HEADER_VALIDTOR]\r\n})\r\nexport class IsbnHeaderValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnHeader', 'ç¬¬ä¸ç»å¿é¡»ä¸º978æ979');\r\n  }\r\n\r\n  validate(c: AbstractControl) {\r\n    if (!c.value) {\r\n      return null;\r\n    }\r\n    if (['999', '978', '979', '000'].indexOf(c.value) < 0) {\r\n      return { isbnHeader: true};\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst FLOAT_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => FloatOnlyValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprFloatOnlyValidtor]',\r\n  providers: [FLOAT_VALIDTOR]\r\n})\r\nexport class FloatOnlyValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('float', 'è¯·è¾å¥æµ®ç¹æ°');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    const floatVal = parseFloat('' + c.value);\r\n    if (isNaN(floatVal)) {\r\n      return { float: true };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[formGroup]'\r\n})\r\nexport class MprFormGroupDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'form,ngForm,[ngForm]'\r\n})\r\nexport class MprFormDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { FormControlValidComponent } from './form-control-valid/form-control-valid.component';\r\nimport { FormValidMsgDirective } from './directives/form-valid-msg.directive';\r\nimport { GlobalValidService } from './services/global-valid.service';\r\nimport { FormValidMsgService } from './services/form-valid-msg.service';\r\nimport { IsbnValidtorDirective } from './validtors/isbn-validtor.directive';\r\nimport { IsbnPartValidDirective } from './validtors/isbn-part-valid.directive';\r\nimport { IsbnHeaderValidDirective } from './validtors/isbn-header-valid.directive';\r\nimport { FloatOnlyValidtorDirective } from './validtors/float-only-validtor.directive';\r\nimport { MprFormGroupDirective } from './directives/form-group.directive';\r\nimport { MprFormDirective } from './directives/form.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective,\r\n    MprFormDirective\r\n  ],\r\n  exports: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective,\r\n    MprFormDirective\r\n  ],\r\n  providers: [\r\n    GlobalValidService,\r\n    FormValidMsgService\r\n  ]\r\n})\r\nexport class FormValidModule { }\r\n"]}