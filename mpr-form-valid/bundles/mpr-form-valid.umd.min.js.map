{"version":3,"sources":["ng://mpr-form-valid/lib/services/global-valid-msg.service.ts","ng://mpr-form-valid/lib/services/form-valid-msg.service.ts","ng://mpr-form-valid/lib/services/global-valid.service.ts","ng://mpr-form-valid/lib/form-control-valid/form-control-valid.component.ts","ng://mpr-form-valid/lib/directives/form-valid-msg.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-validtor.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-part-valid.directive.ts","ng://mpr-form-valid/lib/validtors/isbn-header-valid.directive.ts","ng://mpr-form-valid/lib/validtors/float-only-validtor.directive.ts","ng://mpr-form-valid/lib/directives/form-group.directive.ts","ng://mpr-form-valid/lib/directives/form.directive.ts","ng://mpr-form-valid/lib/form-valid.module.ts"],"names":["GlobalValidMsgService","Map","prototype","registerMsg","msgKey","msgValue","Error","this","validMsg","set","toLowerCase","getMsg","get","globalValidMsgServ","FormValidMsgService","setValidMsg","getValidMsg","msgPath","error","tmpMsg","tmpWeight","minWeight","Number","MAX_VALUE","errorMsg","name_1","hasOwnProperty","orgName","formartMsg","isNaN","msg","value","replace","match","p1","resetMsg","name_2","formatMsg","path","result","name_3","Injectable","GlobalValidService","_this","Observable","create","observer","scrollObserver","doScrollObserv","pipe","debounceTime","subscribe","needScroll","scrollElem","length","minScrollTop","forEach","elem","top","getBoundingClientRect","c","n","nodeName","el","prop","getComputedStyle","style","node","overflowY","window","currentStyle","word","letter","toUpperCase","undefined","scrollHeight","clientHeight","parentNode","ownerDocument","getScrollableContainer","scrollIntoView","Object","assign","onlyScrollIfNeeded","offsetTop","scrollOptions","registerValidForm","form","errorHook","index","validForms","findIndex","count","push","errorHooks","resetNull","elemForm","FormControl","reset","emitEvent","onlySelf","setErrors","markAsPristine","resetGroup","unsubscribe","sub","valueChanges","scrollTo","next","validAll","disabled","valid","markAsDirty","console","log","status","setValue","emitModelToViewChange","emitViewToModelChange","statusChanges","emit","validFormGroup","unregisterValidForm","fIndex","indexOf","splice","formGroup","formControls","controls","FormGroup","VALID_COMPONENT_NAME","FormControlValidComponent","controlName","container","errMsgServ","globalValidServ","elemRef","ngOnInit","ngAfterViewInit","setTimeout","delete","bindControlErrorMsg","getFormControlName","control","formControl","getPath","root","errors","Promise","resolve","then","nativeElement","onlyGroup","getGroupControlValidMsg","ngOnDestroy","setFormControlMsgListener","errorInfo","pristine","tmpErrorInfo","getParentGroupELem","parentElement","getAttribute","toLocaleLowerCase","getSlibingFormContrlElem","searchElem","previousSibling","previousElementSibling","hasAttribute","groupValidControlLength","querySelectorAll","FormGroupDirective","FormGroupName","NgModelGroup","name","siblingElem","ctrlName","tmpPath","join","Component","args","selector","template","styles","Attribute","ControlContainer","decorators","type","Optional","ElementRef","Input","ContentChild","TemplateRef","FormValidMsgDirective","msgServ","defineProperty","Directive","providers","ISBN_VALIDTOR","provide","NG_VALIDATORS","useExisting","forwardRef","IsbnValidtorDirective","multi","validate","isbn","isbn1","isbn2","isbn3","isbn4","isbn5","validISBNCode","s","isBarCode","d","a","b","i","sc","parseInt","RegExp","exec","substring","ISBN_PART_VALIDTOR","IsbnPartValidDirective","isbnPart34","ISBN_HEADER_VALIDTOR","IsbnHeaderValidDirective","isbnHeader","FLOAT_VALIDTOR","FloatOnlyValidtorDirective","floatVal","parseFloat","float","MprFormGroupDirective","render","setAttribute","Renderer2","MprFormDirective","FormValidModule","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/**\r\n * å¨å±éªè¯æ¶æ¯ï¼ å­å¨é»è®¤æ¶æ¯\r\n */\r\nexport class GlobalValidMsgService {\r\n\tprivate validMsg = new Map<String, String>();\r\n\tconstructor() {}\r\n\r\n\t/**\r\n   * è®¾ç½®éè¯¯keyçé»è®¤æ¶æ¯\r\n   * @param msgKey éè¯¯key\r\n   * @param msgValue éè¯¯æ¶æ¯\r\n   */\r\n\tpublic registerMsg(msgKey: string, msgValue: string) {\r\n\t\tif (!msgKey || !msgValue) {\r\n\t\t\tthrow new Error('msg key and value must not empty');\r\n\t\t}\r\n\t\tthis.validMsg.set(msgKey.toLowerCase(), msgValue);\r\n\t}\r\n\r\n\tpublic getMsg(msgKey: string) {\r\n\t\tif (!msgKey) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.validMsg.get(msgKey.toLowerCase());\r\n\t}\r\n}\r\n\r\nexport const globalValidMsgServ = new GlobalValidMsgService();\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { globalValidMsgServ } from './global-valid-msg.service';\r\n\r\n@Injectable()\r\nexport class FormValidMsgService {\r\n  private validMsg = {};\r\n  constructor() {}\r\n\r\n  public setValidMsg(msgKey: string, msgValue: string) {\r\n    if (!msgValue) {\r\n      return;\r\n    }\r\n    this.validMsg[msgKey.toLowerCase()] = msgValue;\r\n  }\r\n\r\n  public getValidMsg(msgPath: string, error) {\r\n    let minWeight = Number.MAX_VALUE;\r\n    let errorMsg = '';\r\n    let tmpMsg;\r\n    let tmpWeight;\r\n    msgPath = (msgPath || '').toLowerCase();\r\n    if (!error || !msgPath) {\r\n      return { errorMsg, minWeight };\r\n    }\r\n\r\n    for (let name in error) {\r\n      if (!error.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      const orgName = name;\r\n      name = name.toLowerCase();\r\n      tmpMsg = this.formartMsg(this.validMsg[msgPath + '.' + name] || globalValidMsgServ.getMsg(name), error[orgName]);\r\n      if (!tmpMsg) {\r\n        continue;\r\n      }\r\n      if (Number.isNaN(Number(error[name]))) {\r\n        tmpWeight = 1000;\r\n      } else {\r\n        tmpWeight = Number(error[name]);\r\n      }\r\n      if (tmpWeight < minWeight) {\r\n        minWeight = tmpWeight;\r\n        errorMsg = tmpMsg;\r\n      }\r\n    }\r\n    return { errorMsg, minWeight };\r\n  }\r\n\r\n  public formartMsg(msg: string, value: any) {\r\n    if (typeof value !== 'object' || !value) {\r\n      return msg;\r\n    }\r\n    return msg.replace(/\\{(.+)\\}/g, function(match, p1) {\r\n      return value[p1] || '';\r\n    });\r\n  }\r\n\r\n  public resetMsg(msg: Object) {\r\n    if (typeof msg !== 'object') {\r\n      throw Error('form valid msg must be a object');\r\n    }\r\n    //this.validMsg = {};\r\n\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        this.validMsg[name.toLowerCase()] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], name.toLowerCase(), this.validMsg);\r\n      }\r\n    }\r\n  }\r\n\r\n  private formatMsg(msg: Object, path: string, result: Object) {\r\n    for (const name in msg) {\r\n      if (typeof msg[name] !== 'object') {\r\n        result[path + '.' + name.toLowerCase()] = msg[name];\r\n      } else {\r\n        this.formatMsg(msg[name], path + '.' + name.toLowerCase(), result);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { FormGroup, FormControl, AbstractControl } from '@angular/forms';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport scrollIntoView from 'dom-scroll-into-view';\r\n\r\nfunction computedStyle(el, prop) {\r\n  const getComputedStyle = window.getComputedStyle;\r\n  const style =\r\n    // If we have getComputedStyle\r\n    getComputedStyle\r\n      ? // Query it\r\n        // TODO: From CSS-Query notes, we might need (node, null) for FF\r\n        getComputedStyle(el)\r\n      : // Otherwise, we are in IE and use currentStyle\r\n        el.currentStyle;\r\n  if (style) {\r\n    return style[\r\n      // Switch to camelCase for CSSOM\r\n      // DEV: Grabbed from jQuery\r\n      // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194\r\n      // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597\r\n      prop.replace(/-(\\w)/gi, (word, letter) => {\r\n        return letter.toUpperCase();\r\n      })\r\n    ];\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction getScrollableContainer(n) {\r\n  let node = n;\r\n  let nodeName;\r\n  /* eslint no-cond-assign:0 */\r\n  while (node && (nodeName = node.nodeName.toLowerCase()) !== 'body') {\r\n    const overflowY = computedStyle(node, 'overflowY');\r\n    // https://stackoverflow.com/a/36900407/3040605\r\n    if (node !== n && (overflowY === 'auto' || overflowY === 'scroll') && node.scrollHeight > node.clientHeight) {\r\n      return node;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return nodeName === 'body' ? node.ownerDocument : node;\r\n}\r\n\r\n@Injectable()\r\nexport class GlobalValidService {\r\n  private validForms: Array<any> = [];\r\n  private needScroll = false;\r\n  private scrollElem: Array<Element> = [];\r\n  private doScrollObserv: Observable<any> = Observable.create((observer) => {\r\n    this.scrollObserver = observer;\r\n  });\r\n  private scrollObserver: Observer<any>;\r\n  private scrollOptions = null;\r\n\r\n  constructor() {\r\n    this.doScrollObserv.pipe(debounceTime(500)).subscribe(() => {\r\n      if (!this.needScroll || !this.scrollElem.length) {\r\n        return;\r\n      }\r\n      this.needScroll = false;\r\n      let minScrollTop = Number.MAX_VALUE;\r\n      let scrollElem: Element;\r\n      this.scrollElem.forEach((elem) => {\r\n        const top = elem.getBoundingClientRect().top;\r\n        if (minScrollTop > top) {\r\n          minScrollTop = top;\r\n          scrollElem = elem;\r\n        }\r\n      });\r\n      if (!scrollElem) {\r\n        return;\r\n      }\r\n      const c = getScrollableContainer(scrollElem);\r\n      if (!c) {\r\n        return;\r\n      }\r\n      scrollIntoView(\r\n        scrollElem,\r\n        c,\r\n        Object.assign(\r\n          {},\r\n          {\r\n            onlyScrollIfNeeded: true,\r\n            offsetTop: 200\r\n          },\r\n          this.scrollOptions || {}\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  public registerValidForm(form: AbstractControl, errorHook: Function) {\r\n    let index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0) {\r\n      this.validForms[index].count += 1;\r\n    } else {\r\n      index = this.validForms.length;\r\n      this.validForms.push({ form: form, count: 1, errorHooks: [] });\r\n    }\r\n    if (errorHook) {\r\n      this.validForms[index].errorHooks.push(errorHook);\r\n    }\r\n  }\r\n\r\n  public resetNull() {\r\n    this.validForms.forEach((elemForm) => {\r\n      if (elemForm.form instanceof FormControl) {\r\n        elemForm.form.reset(null, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: true });\r\n        elemForm.form.markAsPristine();\r\n      } else {\r\n        elemForm.form.reset({}, { emitEvent: false, onlySelf: true });\r\n        elemForm.form.setErrors(null, { emitEvent: false });\r\n        this.resetGroup(elemForm.form);\r\n      }\r\n      if (elemForm['sub']) {\r\n        elemForm['sub'].unsubscribe();\r\n      }\r\n      elemForm.form['_reset'] = true;\r\n      const sub = elemForm.form.valueChanges.subscribe(() => {\r\n        elemForm.form['_reset'] = false;\r\n        elemForm['sub'].unsubscribe();\r\n        elemForm['sub'] = null;\r\n      });\r\n      elemForm['sub'] = sub;\r\n    });\r\n  }\r\n\r\n  public scrollTo(elem: Element) {\r\n    if (!this.needScroll) {\r\n      return;\r\n    }\r\n    this.scrollElem.push(elem);\r\n    this.scrollObserver.next(elem);\r\n  }\r\n\r\n  public validAll(needScroll = false, scrollOptions = null) {\r\n    this.needScroll = needScroll;\r\n    this.scrollOptions = scrollOptions;\r\n    this.scrollElem = [];\r\n    let result = true;\r\n    this.validForms.forEach((elemForm) => {\r\n      if (elemForm.form.disabled) {\r\n        return;\r\n      }\r\n      if (!elemForm.form.valid || elemForm.form['_reset']) {\r\n        elemForm.form.markAsDirty();\r\n        if (elemForm.form instanceof FormControl) {\r\n          console.log(elemForm.form.status, elemForm.form);\r\n          if (elemForm.form['_reset']) {\r\n            elemForm.form['_reset'] = false;\r\n            elemForm.form.setValue(elemForm.form.value, {\r\n              emitModelToViewChange: false,\r\n              emitViewToModelChange: false,\r\n              onlySelf: true,\r\n              emitEvent: false\r\n            });\r\n          }\r\n          elemForm.form.statusChanges.emit(elemForm.form.status);\r\n        } else {\r\n          this.validFormGroup(elemForm.form);\r\n        }\r\n        if (!elemForm.form.valid) {\r\n          elemForm.errorHooks.forEach((errorHook) => {\r\n            errorHook(elemForm.form);\r\n          });\r\n        }\r\n      }\r\n      result = elemForm.form.valid && result;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public unregisterValidForm(form, errorHook: Function) {\r\n    const index = this.validForms.findIndex((elem) => {\r\n      return elem.form == form;\r\n    });\r\n    if (index >= 0 && this.validForms[index].count > 1) {\r\n      this.validForms[index].count -= 1;\r\n      if (errorHook) {\r\n        const fIndex = this.validForms[index].errorHooks.indexOf(errorHook);\r\n        if (fIndex != -1) {\r\n          this.validForms[index].errorHooks.splice(fIndex, 1);\r\n        }\r\n      }\r\n    } else {\r\n      this.validForms.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  private validFormGroup(formGroup: FormGroup) {\r\n    if (formGroup.disabled) {\r\n      return;\r\n    }\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name].disabled) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        this.validFormGroup(<FormGroup>formControls[name]);\r\n      }\r\n      if (!formControls[name].valid || formControls[name]['_reset']) {\r\n        formControls[name].markAsDirty();\r\n        console.log(formControls[name].status, formControls[name]);\r\n        if (formControls[name]['_reset']) {\r\n          formControls[name]['_reset'] = false;\r\n          formControls[name].setValue(formControls[name].value, {\r\n            emitModelToViewChange: false,\r\n            emitViewToModelChange: false,\r\n            onlySelf: true,\r\n            emitEvent: false\r\n          });\r\n        }\r\n        (formControls[name].statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n      }\r\n      if (!formGroup.valid || formGroup['_reset']) {\r\n        formGroup.markAsDirty();\r\n        if (formGroup['_reset']) {\r\n          formGroup['_reset'] = false;\r\n          formGroup.setValue(formGroup.value, { onlySelf: true, emitEvent: false });\r\n        }\r\n        (formGroup.statusChanges as EventEmitter<string>).emit(formControls[name].status);\r\n      }\r\n    }\r\n  }\r\n\r\n  private resetGroup(formGroup: FormGroup) {\r\n    const formControls = formGroup.controls;\r\n    for (const name in formControls) {\r\n      if (!formControls.hasOwnProperty(name)) {\r\n        continue;\r\n      }\r\n      if (formControls[name] instanceof FormGroup) {\r\n        formControls[name].setErrors(null, { emitEvent: false });\r\n        this.resetGroup(<FormGroup>formControls[name]);\r\n      } else {\r\n        formControls[name].setErrors(null, { emitEvent: true });\r\n      }\r\n      formControls[name]['_reset'] = true;\r\n      formControls[name].markAsPristine();\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Input,\r\n  Inject,\r\n  AfterContentInit,\r\n  ElementRef,\r\n  Attribute,\r\n  Optional\r\n} from '@angular/core';\r\nimport {\r\n  ControlContainer,\r\n  AbstractControl,\r\n  AbstractControlDirective,\r\n  FormControl,\r\n  FormGroup,\r\n  FormGroupName,\r\n  FormGroupDirective,\r\n  NgModelGroup\r\n} from '@angular/forms';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\nimport { GlobalValidService } from '../services/global-valid.service';\r\n\r\nconst VALID_COMPONENT_NAME = 'mpr-form-control-valid';\r\n\r\n@Component({\r\n  selector: VALID_COMPONENT_NAME,\r\n  template: `<span\r\n    class=\"error\"\r\n    [ngClass]=\"errorPrompt\"\r\n    [hidden]=\"!errorMsg\"\r\n>\r\n    <ng-container\r\n        [ngTemplateOutlet]=\"template\"\r\n        [ngTemplateOutletContext]=\"{errorMsg:errorMsg}\"\r\n    ></ng-container>\r\n    <p *ngIf=\"!template\">{{errorMsg}}</p>\r\n</span>\r\n`,\r\n  styles: [`p{width:100%;height:17px;line-height:17px;color:#e06a2f;float:left}`]\r\n})\r\nexport class FormControlValidComponent implements OnInit {\r\n  //åªæ¾ç¤ºformgroupæ¬èº«çéè¯¯ï¼ä¸æ¾ç¤ºgroupä¸controlçéè¯¯\r\n  @Input() onlyGroup = false;\r\n  @Input() errorPrompt;\r\n  @Input() controlName;\r\n  @Input() errorHook: Function;\r\n\r\n  @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n\r\n  public errorMsg: string; //éªè¯å¤±è´¥æ¾ç¤ºçéè¯¯æ¶æ¯\r\n\r\n  private formControl: AbstractControl;\r\n  private groupValidControlLength = 1;\r\n  private delete = false;\r\n\r\n  constructor(\r\n    @Attribute('controlName') controlName: string,\r\n    @Optional() private container: ControlContainer,\r\n    private errMsgServ: FormValidMsgService,\r\n    private globalValidServ: GlobalValidService,\r\n    private elemRef: ElementRef\r\n  ) {\r\n    if (controlName) {\r\n      this.controlName = controlName.replace(/'/g, '');\r\n    }\r\n  }\r\n\r\n  ngOnInit() {}\r\n\r\n  ngAfterViewInit() {\r\n    //  å¼å®¹ngFrom\r\n    // Promise.resolve(null).then(() => {\r\n    //   this.bindControlErrorMsg();\r\n    // });\r\n    setTimeout(() => {\r\n      if (!this.delete) {\r\n        this.bindControlErrorMsg();\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  bindControlErrorMsg() {\r\n    this.controlName = this.getFormControlName();\r\n    if (!this.controlName) {\r\n      throw new Error(\"can't find controlName\");\r\n    }\r\n    console.log(this.controlName);\r\n    let path = '';\r\n    const isFormControl =\r\n      this.container.control.get(this.controlName) &&\r\n      this.container.control.get(this.controlName) instanceof FormControl;\r\n    if (!isFormControl) {\r\n      // from root or from formGroupName\r\n      this.formControl = this.container.control;\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.statusChanges.subscribe(() => {\r\n        // if (this.formControl.pristine) {\r\n        //   return;\r\n        // }\r\n        if (this.onlyGroup) {\r\n          this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)['errorMsg'];\r\n        } else {\r\n          this.errorMsg = this.getGroupControlValidMsg(<any>this.formControl, path || this.controlName, {\r\n            minWeight: Number.MAX_VALUE,\r\n            errorMsg: ''\r\n          })['errorMsg'];\r\n        }\r\n      });\r\n    } else {\r\n      this.formControl = this.container.control.get(this.controlName);\r\n      path = this.getPath(this.formControl, this.formControl.root, this.controlName);\r\n      this.formControl.statusChanges.subscribe(() => {\r\n        // if (this.formControl.pristine) {\r\n        //   return;\r\n        // }\r\n        this.errorMsg = this.errMsgServ.getValidMsg(path || this.controlName, this.formControl.errors)['errorMsg'];\r\n        if (this.errorMsg) {\r\n          Promise.resolve(null).then(() => {\r\n            this.globalValidServ.scrollTo(this.elemRef.nativeElement);\r\n          });\r\n        }\r\n      });\r\n    }\r\n    if (!this.formControl) {\r\n      throw new Error('formControl instance not find');\r\n    }\r\n    this.globalValidServ.registerValidForm(this.formControl['root'] || this.formControl, this.errorHook);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    //Called once, before the instance is destroyed.\r\n    //Add 'implements OnDestroy' to the class.\r\n    if (this.formControl) {\r\n      this.globalValidServ.unregisterValidForm(this.formControl['root'] || this.formControl, this.errorHook);\r\n    }\r\n    this.delete = true;\r\n  }\r\n\r\n  private setFormControlMsgListener(control: FormGroup | FormControl, path) {\r\n    control.valueChanges.subscribe(() => {\r\n      let errorInfo = this.errMsgServ.getValidMsg(path || this.controlName, control.errors);\r\n    });\r\n    if (control instanceof FormGroup) {\r\n      for (let name in control.controls) {\r\n        this.setFormControlMsgListener(<any>control.get(name), path + '.' + name);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·ågroupä¸é¢çææéªè¯éè¯¯æ¶æ¯\r\n   * @param control\r\n   * @param path\r\n   */\r\n  private getGroupControlValidMsg(control: any, path: string, errorInfo) {\r\n    if (control instanceof FormControl && !control.pristine) {\r\n      return this.errMsgServ.getValidMsg(path, control.errors);\r\n    } else if (control instanceof FormControl && control.pristine) {\r\n      return '';\r\n    }\r\n    let tmpErrorInfo;\r\n    for (let name in control.controls) {\r\n      tmpErrorInfo = this.getGroupControlValidMsg(<any>control.get(name), path + '.' + name, errorInfo);\r\n      if (tmpErrorInfo && tmpErrorInfo['minWeight'] < errorInfo['minWeight']) {\r\n        errorInfo = tmpErrorInfo;\r\n      }\r\n    }\r\n    if (!control.pristine) {\r\n      tmpErrorInfo = this.errMsgServ.getValidMsg(path, control.errors);\r\n    }\r\n    if (tmpErrorInfo && tmpErrorInfo['minWeight'] < errorInfo['minWeight']) {\r\n      errorInfo = tmpErrorInfo;\r\n    }\r\n    return errorInfo;\r\n  }\r\n\r\n  private getParentGroupELem(): Element {\r\n    let parentElement: Element = this.elemRef.nativeElement.parentElement;\r\n    // const arrtributeNames: Array<string> = parentElement.getAttributeNames();\r\n    // console.log(parentElement.getAttribute('ng-reflect-form'));\r\n    while (\r\n      parentElement &&\r\n      !parentElement.getAttribute('formgroupname') &&\r\n      !parentElement.getAttribute('formGroupName') &&\r\n      !parentElement.getAttribute('formgroup')\r\n    ) {\r\n      if (\r\n        parentElement.nodeName.toLocaleLowerCase() === 'form' ||\r\n        parentElement.nodeName.toLocaleLowerCase() === 'ngform'\r\n      ) {\r\n        break;\r\n      }\r\n      parentElement = parentElement.parentElement;\r\n    }\r\n    if (!parentElement) {\r\n      console.log(this.elemRef.nativeElement);\r\n      throw new Error('can not find parentElement');\r\n    }\r\n    return parentElement;\r\n  }\r\n\r\n  private getSlibingFormContrlElem(searchElem: Element) {\r\n    let previousSibling: Element = searchElem.previousElementSibling;\r\n    while (\r\n      previousSibling &&\r\n      !previousSibling.hasAttribute('formcontrolname') &&\r\n      !previousSibling.hasAttribute('formControlName') &&\r\n      !previousSibling.hasAttribute('name')\r\n    ) {\r\n      // if(previousSibling.hasAttribute(\"formGroupName\") || previousSibling.hasAttribute(\"[formGroup]\")){\r\n      //   throw new Error(\"have search to root\");\r\n      // }\r\n      previousSibling = previousSibling.previousElementSibling;\r\n    }\r\n    if (!previousSibling) {\r\n      throw new Error('mpr-form-control-valid must have a formcontrol sibiling');\r\n    }\r\n    return previousSibling;\r\n  }\r\n\r\n  /**\r\n   * èªå¨æ¥æ¾å½åéªè¯å¯¹åºçformControlNameæèformGroupName\r\n   */\r\n  private getFormControlName(): string {\r\n    if (this.controlName) {\r\n      // æå¨è®¾å®äºcontrolName\r\n      return this.controlName;\r\n    }\r\n\r\n    let controlName;\r\n    if (!this.container) {\r\n      throw new Error('only one [formControl] not support, There must be a formGroupName or [formGroup]');\r\n    } else {\r\n      const parentElement: Element = this.getParentGroupELem();\r\n      const groupValidControlLength = parentElement.querySelectorAll(VALID_COMPONENT_NAME).length;\r\n      this.groupValidControlLength = groupValidControlLength;\r\n      if (this.container instanceof FormGroupDirective && groupValidControlLength <= 1) {\r\n        // ç´æ¥æ¯æ ¹èç¹å¯¹åºæ´ä¸ªfrom [formGroup]=\"formGroup\"\r\n        // æ´ä¸ªformè¡¨ååªæä¸ä¸ªmpr-form-control-validï¼åä»¥å½åformGroupå¯¹åºçåéåä¸ºcontrolName\r\n        throw new Error('you should set controlName by yourself');\r\n      } else if (this.container instanceof FormGroupName && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = parentElement.getAttribute('formgroupname') || parentElement.getAttribute('fromGroupName');\r\n      } else if (this.container instanceof NgModelGroup && groupValidControlLength <= 1) {\r\n        // ç¶èç¹æ¯formè¡¨åä¸­æä¸ªgroup\r\n        // æ´ä¸ªgroupåªæä¸ä¸ªmpr-form-control-valid\r\n        // ä¼ååfromGroupçéªè¯\r\n        controlName = this.container.name;\r\n      } else {\r\n        // mpr-form-control-valid å¯¹åºä¸ä¸ª formControlName\r\n        // ååæ¥æ¾åå¼èç¹\r\n        const siblingElem = this.getSlibingFormContrlElem(this.elemRef.nativeElement);\r\n        controlName =\r\n          siblingElem.getAttribute('formcontrolname') ||\r\n          siblingElem.getAttribute('formControlName') ||\r\n          siblingElem.getAttribute('name');\r\n      }\r\n    }\r\n    // if(this.controlName && this.controlName != controlName){\r\n    //   throw new Error(`you may set a error controlName, you set is: ${this.controlName}, but need is: ${controlName}`);\r\n    // }\r\n    return controlName;\r\n  }\r\n\r\n  /**\r\n   * è·åå½åformControlç¸å¯¹äºformGroupçpath\r\n   * @param formControl\r\n   * @param root\r\n   * @param controlName\r\n   */\r\n  private getPath(formControl: AbstractControl, root, controlName) {\r\n    if (!(root instanceof FormGroup)) {\r\n      if (formControl === root) {\r\n        return controlName;\r\n      }\r\n      return '';\r\n    }\r\n    const path = [];\r\n    for (const ctrlName in root['controls']) {\r\n      if (root['controls'][ctrlName] === formControl) {\r\n        return ctrlName;\r\n      }\r\n      if (root['controls'][ctrlName] instanceof FormGroup) {\r\n        const tmpPath = this.getPath(formControl, root['controls'][ctrlName], controlName);\r\n        if (tmpPath) {\r\n          path.push(ctrlName);\r\n          path.push(tmpPath);\r\n          return path.join('.');\r\n        }\r\n      }\r\n    }\r\n    return path.join('.');\r\n  }\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\n\r\nimport { FormValidMsgService } from '../services/form-valid-msg.service';\r\n\r\n@Directive({\r\n  selector: '[isliFormValidMsg]',\r\n  providers: [FormValidMsgService]\r\n})\r\nexport class FormValidMsgDirective {\r\n\r\n  @Input('isliFormValidMsg') set validMsg(msg) {\r\n    if (msg) {\r\n      this.msgServ.resetMsg(msg);\r\n    }\r\n  }\r\n\r\n  constructor(private msgServ: FormValidMsgService) {\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nexport interface ISBN {\r\n  isbn1: string;\r\n  isbn2: string;\r\n  isbn3: string;\r\n  isbn4: string;\r\n  isbn5: string;\r\n}\r\n\r\nconst ISBN_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnValid]',\r\n  providers: [ISBN_VALIDTOR]\r\n})\r\nexport class IsbnValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbn', 'è¯·è¾å¥æ­£ç¡®çISBNå·');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    // ä¸éªè¯éç©º\r\n    if (!isbn.isbn1 || !isbn.isbn2 || !isbn.isbn3 || !isbn.isbn4 || !isbn.isbn5) {\r\n      return null;\r\n    }\r\n\r\n    if (this.validISBNCode([isbn.isbn1, isbn.isbn2, isbn.isbn3, isbn.isbn4, isbn.isbn5].join(''))) {\r\n      return { isbn: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private validISBNCode(s) {\r\n    if (s === '9999999999999') {\r\n      return true;\r\n    }\r\n    if (!this.isBarCode(s)) {\r\n      return false;\r\n    }\r\n    let a = 0, b = 0, c = 0, d = 0, e;\r\n    for (let i = 1; i <= 12; i++) {\r\n      const sc = parseInt(s[i - 1], 10);\r\n      if (i <= 12 && i % 2 === 0) {\r\n        a += sc;\r\n      } else if (i <= 11 && i % 2 === 1) {\r\n        b += sc;\r\n      }\r\n    }\r\n    c = a * 3;\r\n    d = b + c;\r\n    if (d % 10 === 0) {\r\n      e = d - d;\r\n    } else {\r\n      e = d + (10 - d % 10) - d;\r\n    }\r\n    return e === parseInt(s[12], 10);\r\n  }\r\n\r\n  private isBarCode(s): boolean {\r\n    if (s.length !== 13) {\r\n      return false;\r\n    }\r\n    const reg = new RegExp(/^[0-9]{12}$/);\r\n    return reg.exec(s.substring(0, 12)) != null;\r\n  }\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, FormGroup, NG_VALIDATORS } from '@angular/forms';\r\nimport { ISBN } from './isbn-validtor.directive';\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_PART_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => IsbnPartValidDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnPartValid]',\r\n  providers: [ISBN_PART_VALIDTOR]\r\n})\r\nexport class IsbnPartValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnPart34', 'ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    if (!(c instanceof FormGroup)) {\r\n      throw new Error('isbn must be a group control');\r\n    }\r\n    const isbn: ISBN = c.value;\r\n    if (!isbn.isbn3 || !isbn.isbn4) {\r\n      return null;\r\n    }\r\n    // éªè¯ç¬¬ä¸ç»åç¬¬åç»ä¸å±ä¸º8ä½æ°å­\r\n    if (isbn.isbn3.length + isbn.isbn4.length !== 8) {\r\n      return { isbnPart34: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst ISBN_HEADER_VALIDTOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => IsbnHeaderValidDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprIsbnHeaderValid]',\r\n  providers: [ISBN_HEADER_VALIDTOR]\r\n})\r\nexport class IsbnHeaderValidDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('isbnHeader', 'ç¬¬ä¸ç»å¿é¡»ä¸º978æ979');\r\n  }\r\n\r\n  validate(c: AbstractControl) {\r\n    if (!c.value) {\r\n      return null;\r\n    }\r\n    if (['999', '978', '979', '000'].indexOf(c.value) < 0) {\r\n      return { isbnHeader: true};\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import { Directive, forwardRef } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\nimport { globalValidMsgServ } from '../services/global-valid-msg.service';\r\n\r\nconst FLOAT_VALIDTOR = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => FloatOnlyValidtorDirective),\r\n  multi: true\r\n};\r\n\r\n@Directive({\r\n  selector: '[mprFloatOnlyValidtor]',\r\n  providers: [FLOAT_VALIDTOR]\r\n})\r\nexport class FloatOnlyValidtorDirective implements Validator {\r\n\r\n  constructor() {\r\n    globalValidMsgServ.registerMsg('float', 'è¯·è¾å¥æµ®ç¹æ°');\r\n  }\r\n\r\n  public validate(c: AbstractControl) {\r\n    const floatVal = parseFloat('' + c.value);\r\n    if (isNaN(floatVal)) {\r\n      return { float: true };\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[formGroup]'\r\n})\r\nexport class MprFormGroupDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","import { Directive, ElementRef, Renderer2 } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'form,ngForm,[ngForm]'\r\n})\r\nexport class MprFormDirective {\r\n  constructor(private elem: ElementRef, private render: Renderer2) { }\r\n\r\n  ngOnInit(): void {\r\n    // Called after the constructor, initializing input properties, and the first call to ngOnChanges.\r\n    // Add 'implements OnInit' to the class.\r\n    if (this.elem.nativeElement && this.elem.nativeElement.setAttribute) {\r\n      this.render.setAttribute(this.elem.nativeElement, 'formgroup', 'formgroup');\r\n    } else if (this.elem.nativeElement && this.elem.nativeElement.parentElement) {\r\n      this.render.setAttribute(this.elem.nativeElement.parentElement, 'formgroup', 'formgroup');\r\n    }\r\n  }\r\n}\r\n","\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\nimport { FormControlValidComponent } from './form-control-valid/form-control-valid.component';\r\nimport { FormValidMsgDirective } from './directives/form-valid-msg.directive';\r\nimport { GlobalValidService } from './services/global-valid.service';\r\nimport { FormValidMsgService } from './services/form-valid-msg.service';\r\nimport { IsbnValidtorDirective } from './validtors/isbn-validtor.directive';\r\nimport { IsbnPartValidDirective } from './validtors/isbn-part-valid.directive';\r\nimport { IsbnHeaderValidDirective } from './validtors/isbn-header-valid.directive';\r\nimport { FloatOnlyValidtorDirective } from './validtors/float-only-validtor.directive';\r\nimport { MprFormGroupDirective } from './directives/form-group.directive';\r\nimport { MprFormDirective } from './directives/form.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective,\r\n    MprFormDirective\r\n  ],\r\n  exports: [\r\n    FormControlValidComponent,\r\n    FormValidMsgDirective,\r\n    IsbnValidtorDirective,\r\n    IsbnPartValidDirective,\r\n    IsbnHeaderValidDirective,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    FloatOnlyValidtorDirective,\r\n    MprFormGroupDirective,\r\n    MprFormDirective\r\n  ],\r\n  providers: [\r\n    GlobalValidService,\r\n    FormValidMsgService\r\n  ]\r\n})\r\nexport class FormValidModule { }\r\n"]}